<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Support</name>
    </assembly>
    <members>
        <member name="T:Support.ArrayHelper">
            <summary>
            Provides methods for arrays manipulation.
            </summary>
        </member>
        <member name="M:Support.ArrayHelper.EnsureLength``1(``0[]@,System.Int64)">
            <summary>
            Initializes a specified array by the desired length if the array is <see langword="null"/>; otherwise, doubles the length of the array while the length is less than a specified desired length.
            </summary>
            <param name="array">The array which length is to be ensured.</param>
            <param name="desiredLength">The desired length of the array.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="desiredLength"/> is less than 0.</exception>
        </member>
        <member name="T:Support.Coding.Cryptography.BitOrderCipher">
            <summary>
            Represents a cipher to encrypt and decrypt order of bits of random value.
            </summary>
        </member>
        <member name="F:Support.Coding.Cryptography.BitOrderCipher.Cipher">
            <summary>
            The instance of the <see cref="T:Support.Coding.Cryptography.BitOrderCipher"/>.
            </summary>
        </member>
        <member name="M:Support.Coding.Cryptography.BitOrderCipher.#ctor">
            <summary>
            Initializes the <see cref="T:Support.Coding.Cryptography.BitOrderCipher"/>.
            </summary>
        </member>
        <member name="M:Support.Coding.Cryptography.BitOrderCipher.Encrypt(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypts a specified data by a specified key.
            </summary>
            <param name="dataBuffer">The buffer to contain the data to encrypt.</param>
            <param name="dataIndex">The position of the data in <paramref name="dataBuffer"/>.</param>
            <param name="dataLength">The length of the data.</param>
            <param name="keyBuffer">The buffer to contain the key to encrypt the data.</param>
            <param name="keyIndex">The position of the key in <paramref name="keyBuffer"/>.</param>
            <param name="keyLength">The length of the key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataIndex"/> is outside the range of valid indices of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="dataLength"/> is greater than the number of bytes from <paramref name="dataIndex"/> to the end of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyIndex"/> is outside the range of valid indices of <paramref name="keyBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyLength"/> is greater than the number of bytes from <paramref name="keyIndex"/> to the end of <paramref name="keyBuffer"/>.</exception>
        </member>
        <member name="M:Support.Coding.Cryptography.BitOrderCipher.Decrypt(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decrypts a specified data by a specified key.
            </summary>
            <param name="dataBuffer">The buffer to contain the data to decrypt.</param>
            <param name="dataIndex">The position of the data in <paramref name="dataBuffer"/>.</param>
            <param name="dataLength">The length of the data.</param>
            <param name="keyBuffer">The buffer to contain the key to decrypt the data.</param>
            <param name="keyIndex">The position of the key in <paramref name="keyBuffer"/>.</param>
            <param name="keyLength">The length of the key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataIndex"/> is outside the range of valid indices of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="dataLength"/> is greater than the number of bytes from <paramref name="dataIndex"/> to the end of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyIndex"/> is outside the range of valid indices of <paramref name="keyBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyLength"/> is greater than the number of bytes from <paramref name="keyIndex"/> to the end of <paramref name="keyBuffer"/>.</exception>
        </member>
        <member name="T:Support.Coding.Cryptography.ByteOrderCipher">
            <summary>
            Represents a cipher to encrypt and decrypt order of bytes of random value.
            </summary>
        </member>
        <member name="F:Support.Coding.Cryptography.ByteOrderCipher.Cipher">
            <summary>
            The instance of the <see cref="T:Support.Coding.Cryptography.ByteOrderCipher"/>.
            </summary>
        </member>
        <member name="M:Support.Coding.Cryptography.ByteOrderCipher.#ctor">
            <summary>
            Initializes the <see cref="T:Support.Coding.Cryptography.ByteOrderCipher"/>.
            </summary>
        </member>
        <member name="M:Support.Coding.Cryptography.ByteOrderCipher.Encrypt(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypts a specified data by a specified key.
            </summary>
            <param name="dataBuffer">The buffer to contain the data to encrypt.</param>
            <param name="dataIndex">The position of the data in <paramref name="dataBuffer"/>.</param>
            <param name="dataLength">The length of the data.</param>
            <param name="keyBuffer">The buffer to contain the key to encrypt the data.</param>
            <param name="keyIndex">The position of the key in <paramref name="keyBuffer"/>.</param>
            <param name="keyLength">The length of the key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataIndex"/> is outside the range of valid indices of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="dataLength"/> is greater than the number of bytes from <paramref name="dataIndex"/> to the end of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyIndex"/> is outside the range of valid indices of <paramref name="keyBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyLength"/> is greater than the number of bytes from <paramref name="keyIndex"/> to the end of <paramref name="keyBuffer"/>.</exception>
        </member>
        <member name="M:Support.Coding.Cryptography.ByteOrderCipher.Decrypt(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decrypts a specified data by a specified key.
            </summary>
            <param name="dataBuffer">The buffer to contain the data to decrypt.</param>
            <param name="dataIndex">The position of the data in <paramref name="dataBuffer"/>.</param>
            <param name="dataLength">The length of the data.</param>
            <param name="keyBuffer">The buffer to contain the key to decrypt the data.</param>
            <param name="keyIndex">The position of the key in <paramref name="keyBuffer"/>.</param>
            <param name="keyLength">The length of the key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataIndex"/> is outside the range of valid indices of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="dataLength"/> is greater than the number of bytes from <paramref name="dataIndex"/> to the end of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyIndex"/> is outside the range of valid indices of <paramref name="keyBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyLength"/> is greater than the number of bytes from <paramref name="keyIndex"/> to the end of <paramref name="keyBuffer"/>.</exception>
        </member>
        <member name="T:Support.Coding.Cryptography.Cipher">
            <summary>
            Represents a cipher to encrypt and decrypt data.
            </summary>
        </member>
        <member name="M:Support.Coding.Cryptography.Cipher.Validate(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Validates arguments for <see cref="M:Support.Coding.Cryptography.Cipher.Encrypt(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)"/> and <see cref="M:Support.Coding.Cryptography.Cipher.Decrypt(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)"/> methods.
            </summary>
            <param name="dataBuffer">The buffer to contain the data to encrypt or decrypt.</param>
            <param name="dataIndex">The position of the data in <paramref name="dataBuffer"/>.</param>
            <param name="dataLength">The length of the data.</param>
            <param name="keyBuffer">The buffer to contain the key to encrypt or decrypt the data.</param>
            <param name="keyIndex">The position of the key in <paramref name="keyBuffer"/>.</param>
            <param name="keyLength">The length of the key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataIndex"/> is outside the range of valid indices of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="dataLength"/> is greater than the number of bytes from <paramref name="dataIndex"/> to the end of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyIndex"/> is outside the range of valid indices of <paramref name="keyBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyLength"/> is greater than the number of bytes from <paramref name="keyIndex"/> to the end of <paramref name="keyBuffer"/>.</exception>
        </member>
        <member name="M:Support.Coding.Cryptography.Cipher.Encrypt(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypts a specified data by a specified key.
            </summary>
            <param name="dataBuffer">The buffer to contain the data to encrypt.</param>
            <param name="dataIndex">The position of the data in <paramref name="dataBuffer"/>.</param>
            <param name="dataLength">The length of the data.</param>
            <param name="keyBuffer">The buffer to contain the key to encrypt the data.</param>
            <param name="keyIndex">The position of the key in <paramref name="keyBuffer"/>.</param>
            <param name="keyLength">The length of the key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataIndex"/> is outside the range of valid indices of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="dataLength"/> is greater than the number of bytes from <paramref name="dataIndex"/> to the end of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyIndex"/> is outside the range of valid indices of <paramref name="keyBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyLength"/> is greater than the number of bytes from <paramref name="keyIndex"/> to the end of <paramref name="keyBuffer"/>.</exception>
        </member>
        <member name="M:Support.Coding.Cryptography.Cipher.Decrypt(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decrypts a specified data by a specified key.
            </summary>
            <param name="dataBuffer">The buffer to contain the data to decrypt.</param>
            <param name="dataIndex">The position of the data in <paramref name="dataBuffer"/>.</param>
            <param name="dataLength">The length of the data.</param>
            <param name="keyBuffer">The buffer to contain the key to decrypt the data.</param>
            <param name="keyIndex">The position of the key in <paramref name="keyBuffer"/>.</param>
            <param name="keyLength">The length of the key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataIndex"/> is outside the range of valid indices of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="dataLength"/> is greater than the number of bytes from <paramref name="dataIndex"/> to the end of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyIndex"/> is outside the range of valid indices of <paramref name="keyBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyLength"/> is greater than the number of bytes from <paramref name="keyIndex"/> to the end of <paramref name="keyBuffer"/>.</exception>
        </member>
        <member name="T:Support.Coding.Cryptography.EightByteOrderCipher">
            <summary>
            Represents a cipher to encrypt and decrypt order of eight bytes of random value.
            </summary>
        </member>
        <member name="F:Support.Coding.Cryptography.EightByteOrderCipher.Cipher">
            <summary>
            The instance of the <see cref="T:Support.Coding.Cryptography.EightByteOrderCipher"/>.
            </summary>
        </member>
        <member name="M:Support.Coding.Cryptography.EightByteOrderCipher.#ctor">
            <summary>
            Initializes the <see cref="T:Support.Coding.Cryptography.EightByteOrderCipher"/>.
            </summary>
        </member>
        <member name="M:Support.Coding.Cryptography.EightByteOrderCipher.Encrypt(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypts a specified data by a specified key.
            </summary>
            <param name="dataBuffer">The buffer to contain the data to encrypt.</param>
            <param name="dataIndex">The position of the data in <paramref name="dataBuffer"/>.</param>
            <param name="dataLength">The length of the data.</param>
            <param name="keyBuffer">The buffer to contain the key to encrypt the data.</param>
            <param name="keyIndex">The position of the key in <paramref name="keyBuffer"/>.</param>
            <param name="keyLength">The length of the key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataIndex"/> is outside the range of valid indices of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="dataLength"/> is greater than the number of bytes from <paramref name="dataIndex"/> to the end of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyIndex"/> is outside the range of valid indices of <paramref name="keyBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyLength"/> is greater than the number of bytes from <paramref name="keyIndex"/> to the end of <paramref name="keyBuffer"/>.</exception>
        </member>
        <member name="M:Support.Coding.Cryptography.EightByteOrderCipher.Decrypt(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decrypts a specified data by a specified key.
            </summary>
            <param name="dataBuffer">The buffer to contain the data to decrypt.</param>
            <param name="dataIndex">The position of the data in <paramref name="dataBuffer"/>.</param>
            <param name="dataLength">The length of the data.</param>
            <param name="keyBuffer">The buffer to contain the key to decrypt the data.</param>
            <param name="keyIndex">The position of the key in <paramref name="keyBuffer"/>.</param>
            <param name="keyLength">The length of the key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataIndex"/> is outside the range of valid indices of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="dataLength"/> is greater than the number of bytes from <paramref name="dataIndex"/> to the end of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyIndex"/> is outside the range of valid indices of <paramref name="keyBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyLength"/> is greater than the number of bytes from <paramref name="keyIndex"/> to the end of <paramref name="keyBuffer"/>.</exception>
        </member>
        <member name="T:Support.Coding.Cryptography.FourByteOrderCipher">
            <summary>
            Represents a cipher to encrypt and decrypt order of four bytes of random value.
            </summary>
        </member>
        <member name="F:Support.Coding.Cryptography.FourByteOrderCipher.Cipher">
            <summary>
            The instance of the <see cref="T:Support.Coding.Cryptography.FourByteOrderCipher"/>.
            </summary>
        </member>
        <member name="M:Support.Coding.Cryptography.FourByteOrderCipher.#ctor">
            <summary>
            Initializes the <see cref="T:Support.Coding.Cryptography.FourByteOrderCipher"/>.
            </summary>
        </member>
        <member name="M:Support.Coding.Cryptography.FourByteOrderCipher.Encrypt(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypts a specified data by a specified key.
            </summary>
            <param name="dataBuffer">The buffer to contain the data to encrypt.</param>
            <param name="dataIndex">The position of the data in <paramref name="dataBuffer"/>.</param>
            <param name="dataLength">The length of the data.</param>
            <param name="keyBuffer">The buffer to contain the key to encrypt the data.</param>
            <param name="keyIndex">The position of the key in <paramref name="keyBuffer"/>.</param>
            <param name="keyLength">The length of the key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataIndex"/> is outside the range of valid indices of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="dataLength"/> is greater than the number of bytes from <paramref name="dataIndex"/> to the end of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyIndex"/> is outside the range of valid indices of <paramref name="keyBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyLength"/> is greater than the number of bytes from <paramref name="keyIndex"/> to the end of <paramref name="keyBuffer"/>.</exception>
        </member>
        <member name="M:Support.Coding.Cryptography.FourByteOrderCipher.Decrypt(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decrypts a specified data by a specified key.
            </summary>
            <param name="dataBuffer">The buffer to contain the data to decrypt.</param>
            <param name="dataIndex">The position of the data in <paramref name="dataBuffer"/>.</param>
            <param name="dataLength">The length of the data.</param>
            <param name="keyBuffer">The buffer to contain the key to decrypt the data.</param>
            <param name="keyIndex">The position of the key in <paramref name="keyBuffer"/>.</param>
            <param name="keyLength">The length of the key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataIndex"/> is outside the range of valid indices of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="dataLength"/> is greater than the number of bytes from <paramref name="dataIndex"/> to the end of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyIndex"/> is outside the range of valid indices of <paramref name="keyBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyLength"/> is greater than the number of bytes from <paramref name="keyIndex"/> to the end of <paramref name="keyBuffer"/>.</exception>
        </member>
        <member name="T:Support.Coding.Cryptography.ICipher">
            <summary>
            Represents a cipher to encrypt and decrypt data.
            </summary>
        </member>
        <member name="M:Support.Coding.Cryptography.ICipher.Encrypt(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypts a specified data by a specified key.
            </summary>
            <param name="dataBuffer">The buffer to contain the data to encrypt.</param>
            <param name="dataIndex">The position of the data in <paramref name="dataBuffer"/>.</param>
            <param name="dataLength">The length of the data.</param>
            <param name="keyBuffer">The buffer to contain the key to encrypt the data.</param>
            <param name="keyIndex">The position of the key in <paramref name="keyBuffer"/>.</param>
            <param name="keyLength">The length of the key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataIndex"/> is outside the range of valid indices of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="dataLength"/> is greater than the number of bytes from <paramref name="dataIndex"/> to the end of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyIndex"/> is outside the range of valid indices of <paramref name="keyBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyLength"/> is greater than the number of bytes from <paramref name="keyIndex"/> to the end of <paramref name="keyBuffer"/>.</exception>
        </member>
        <member name="M:Support.Coding.Cryptography.ICipher.Decrypt(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decrypts a specified data by a specified key.
            </summary>
            <param name="dataBuffer">The buffer to contain the data to decrypt.</param>
            <param name="dataIndex">The position of the data in <paramref name="dataBuffer"/>.</param>
            <param name="dataLength">The length of the data.</param>
            <param name="keyBuffer">The buffer to contain the key to decrypt the data.</param>
            <param name="keyIndex">The position of the key in <paramref name="keyBuffer"/>.</param>
            <param name="keyLength">The length of the key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataIndex"/> is outside the range of valid indices of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="dataLength"/> is greater than the number of bytes from <paramref name="dataIndex"/> to the end of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyIndex"/> is outside the range of valid indices of <paramref name="keyBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyLength"/> is greater than the number of bytes from <paramref name="keyIndex"/> to the end of <paramref name="keyBuffer"/>.</exception>
        </member>
        <member name="T:Support.Coding.Cryptography.OrderCipher">
            <summary>
            Represents a cipher to encrypt and decrypt order of bits of random value. The cipher selects one of order ciphers that is enough for maximum strong encryption.
            </summary>
        </member>
        <member name="F:Support.Coding.Cryptography.OrderCipher.Cipher">
            <summary>
            The instance of the <see cref="T:Support.Coding.Cryptography.OrderCipher"/>.
            </summary>
        </member>
        <member name="M:Support.Coding.Cryptography.OrderCipher.#ctor">
            <summary>
            Initializes the <see cref="T:Support.Coding.Cryptography.OrderCipher"/>.
            </summary>
        </member>
        <member name="M:Support.Coding.Cryptography.OrderCipher.Encrypt(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypts a specified data by a specified key.
            </summary>
            <param name="dataBuffer">The buffer to contain the data to encrypt.</param>
            <param name="dataIndex">The position of the data in <paramref name="dataBuffer"/>.</param>
            <param name="dataLength">The length of the data.</param>
            <param name="keyBuffer">The buffer to contain the key to encrypt the data.</param>
            <param name="keyIndex">The position of the key in <paramref name="keyBuffer"/>.</param>
            <param name="keyLength">The length of the key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataIndex"/> is outside the range of valid indices of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="dataLength"/> is greater than the number of bytes from <paramref name="dataIndex"/> to the end of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyIndex"/> is outside the range of valid indices of <paramref name="keyBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyLength"/> is greater than the number of bytes from <paramref name="keyIndex"/> to the end of <paramref name="keyBuffer"/>.</exception>
        </member>
        <member name="M:Support.Coding.Cryptography.OrderCipher.Decrypt(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decrypts a specified data by a specified key.
            </summary>
            <param name="dataBuffer">The buffer to contain the data to decrypt.</param>
            <param name="dataIndex">The position of the data in <paramref name="dataBuffer"/>.</param>
            <param name="dataLength">The length of the data.</param>
            <param name="keyBuffer">The buffer to contain the key to decrypt the data.</param>
            <param name="keyIndex">The position of the key in <paramref name="keyBuffer"/>.</param>
            <param name="keyLength">The length of the key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataIndex"/> is outside the range of valid indices of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="dataLength"/> is greater than the number of bytes from <paramref name="dataIndex"/> to the end of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyIndex"/> is outside the range of valid indices of <paramref name="keyBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyLength"/> is greater than the number of bytes from <paramref name="keyIndex"/> to the end of <paramref name="keyBuffer"/>.</exception>
        </member>
        <member name="T:Support.Coding.Cryptography.TwoByteOrderCipher">
            <summary>
            Represents a cipher to encrypt and decrypt order of two bytes of random value.
            </summary>
        </member>
        <member name="F:Support.Coding.Cryptography.TwoByteOrderCipher.Cipher">
            <summary>
            The instance of the <see cref="T:Support.Coding.Cryptography.TwoByteOrderCipher"/>.
            </summary>
        </member>
        <member name="M:Support.Coding.Cryptography.TwoByteOrderCipher.#ctor">
            <summary>
            Initializes the <see cref="T:Support.Coding.Cryptography.TwoByteOrderCipher"/>.
            </summary>
        </member>
        <member name="M:Support.Coding.Cryptography.TwoByteOrderCipher.Encrypt(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypts a specified data by a specified key.
            </summary>
            <param name="dataBuffer">The buffer to contain the data to encrypt.</param>
            <param name="dataIndex">The position of the data in <paramref name="dataBuffer"/>.</param>
            <param name="dataLength">The length of the data.</param>
            <param name="keyBuffer">The buffer to contain the key to encrypt the data.</param>
            <param name="keyIndex">The position of the key in <paramref name="keyBuffer"/>.</param>
            <param name="keyLength">The length of the key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataIndex"/> is outside the range of valid indices of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="dataLength"/> is greater than the number of bytes from <paramref name="dataIndex"/> to the end of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyIndex"/> is outside the range of valid indices of <paramref name="keyBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyLength"/> is greater than the number of bytes from <paramref name="keyIndex"/> to the end of <paramref name="keyBuffer"/>.</exception>
        </member>
        <member name="M:Support.Coding.Cryptography.TwoByteOrderCipher.Decrypt(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decrypts a specified data by a specified key.
            </summary>
            <param name="dataBuffer">The buffer to contain the data to decrypt.</param>
            <param name="dataIndex">The position of the data in <paramref name="dataBuffer"/>.</param>
            <param name="dataLength">The length of the data.</param>
            <param name="keyBuffer">The buffer to contain the key to decrypt the data.</param>
            <param name="keyIndex">The position of the key in <paramref name="keyBuffer"/>.</param>
            <param name="keyLength">The length of the key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataIndex"/> is outside the range of valid indices of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="dataLength"/> is greater than the number of bytes from <paramref name="dataIndex"/> to the end of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyIndex"/> is outside the range of valid indices of <paramref name="keyBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyLength"/> is greater than the number of bytes from <paramref name="keyIndex"/> to the end of <paramref name="keyBuffer"/>.</exception>
        </member>
        <member name="T:Support.Coding.Cryptography.ValueCipher">
            <summary>
            Represents a cipher to encrypt and decrypt values which order is random.
            </summary>
        </member>
        <member name="F:Support.Coding.Cryptography.ValueCipher.Cipher">
            <summary>
            The instance of the <see cref="T:Support.Coding.Cryptography.ValueCipher"/>.
            </summary>
        </member>
        <member name="M:Support.Coding.Cryptography.ValueCipher.#ctor">
            <summary>
            Initializes the <see cref="T:Support.Coding.Cryptography.ValueCipher"/>.
            </summary>
        </member>
        <member name="M:Support.Coding.Cryptography.ValueCipher.Encrypt(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypts a specified data by a specified key.
            </summary>
            <param name="dataBuffer">The buffer to contain the data to encrypt.</param>
            <param name="dataIndex">The position of the data in <paramref name="dataBuffer"/>.</param>
            <param name="dataLength">The length of the data.</param>
            <param name="keyBuffer">The buffer to contain the key to encrypt the data.</param>
            <param name="keyIndex">The position of the key in <paramref name="keyBuffer"/>.</param>
            <param name="keyLength">The length of the key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataIndex"/> is outside the range of valid indices of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="dataLength"/> is greater than the number of bytes from <paramref name="dataIndex"/> to the end of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyIndex"/> is outside the range of valid indices of <paramref name="keyBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyLength"/> is greater than the number of bytes from <paramref name="keyIndex"/> to the end of <paramref name="keyBuffer"/>.</exception>
        </member>
        <member name="M:Support.Coding.Cryptography.ValueCipher.Decrypt(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decrypts a specified data by a specified key.
            </summary>
            <param name="dataBuffer">The buffer to contain the data to decrypt.</param>
            <param name="dataIndex">The position of the data in <paramref name="dataBuffer"/>.</param>
            <param name="dataLength">The length of the data.</param>
            <param name="keyBuffer">The buffer to contain the key to decrypt the data.</param>
            <param name="keyIndex">The position of the key in <paramref name="keyBuffer"/>.</param>
            <param name="keyLength">The length of the key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataIndex"/> is outside the range of valid indices of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="dataLength"/> is greater than the number of bytes from <paramref name="dataIndex"/> to the end of <paramref name="dataBuffer"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyBuffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyIndex"/> is outside the range of valid indices of <paramref name="keyBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="keyLength"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyLength"/> is greater than the number of bytes from <paramref name="keyIndex"/> to the end of <paramref name="keyBuffer"/>.</exception>
        </member>
        <member name="T:Support.Coding.Serialization.ConstantLengthSerializer`1">
            <summary>
            Represents an <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> implementation.
            </summary>
            <typeparam name="T">The type which instances are to be able to be serialized to a sequence of bytes with constant length and deserialized back.</typeparam>
        </member>
        <member name="M:Support.Coding.Serialization.ConstantLengthSerializer`1.#ctor(System.Int32)">
            <summary>
            Initializes the <see cref="T:Support.Coding.Serialization.ConstantLengthSerializer`1"/>.
            </summary>
            <param name="count">A number of bytes requiring to serialize any instance of the type.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than 0.</exception>
        </member>
        <member name="P:Support.Coding.Serialization.ConstantLengthSerializer`1.Count">
            <summary>
            Gets the number of bytes requiring to serialize any instance of the type.
            </summary>
        </member>
        <member name="M:Support.Coding.Serialization.ConstantLengthSerializer`1.ValidateSerialize(System.Byte[],System.Int32)">
            <summary>
            Validates arguments of <see cref="M:Support.Coding.Serialization.ConstantLengthSerializer`1.Serialize(`0,System.Byte[],System.Int32)"/> method.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.ArgumentException"><see cref="P:Support.Coding.Serialization.ConstantLengthSerializer`1.Count"/> is greater than the number of bytes from <paramref name="index"/> to the end of <paramref name="buffer"/></exception>
        </member>
        <member name="M:Support.Coding.Serialization.ConstantLengthSerializer`1.ValidateSerialize(`0,System.Byte[],System.Int32)">
            <summary>
            Validates arguments of <see cref="M:Support.Coding.Serialization.ConstantLengthSerializer`1.Serialize(`0,System.Byte[],System.Int32)"/> method.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.ArgumentException"><see cref="P:Support.Coding.Serialization.ConstantLengthSerializer`1.Count"/> is greater than the number of bytes from <paramref name="index"/> to the end of <paramref name="buffer"/></exception>
        </member>
        <member name="M:Support.Coding.Serialization.ConstantLengthSerializer`1.ValidateDeserialize(System.Byte[],System.Int32)">
            <summary>
            Validates arguments of <see cref="M:Support.Coding.Serialization.ConstantLengthSerializer`1.Deserialize(System.Byte[],System.Int32)"/> method.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.ArgumentException"><see cref="P:Support.Coding.Serialization.ConstantLengthSerializer`1.Count"/> is greater than the number of bytes from <paramref name="index"/> to the end of <paramref name="buffer"/></exception>
        </member>
        <member name="M:Support.Coding.Serialization.ConstantLengthSerializer`1.Serialize(`0,System.Byte[],System.Int32)">
            <summary>
            Serializes a specified instance to a sequence of bytes then writes the bytes to a specified buffer.
            </summary>
            <param name="instance">An instance to serialize.</param>
            <param name="buffer">The buffer to contain the bytes.</param>
            <param name="index">The position of the bytes in <paramref name="buffer"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.ArgumentException"><see cref="P:Support.Coding.Serialization.ConstantLengthSerializer`1.Count"/> is greater than the number of bytes from <paramref name="index"/> to the end of <paramref name="buffer"/> or another error occurred.</exception>
        </member>
        <member name="M:Support.Coding.Serialization.ConstantLengthSerializer`1.Serialize(`0,System.Byte[],System.Int32@)">
            <summary>
            Serializes a specified instance to a sequence of bytes then writes the bytes to a specified buffer and increases a specified index by the number of serialized bytes.
            </summary>
            <param name="instance">An instance to serialize.</param>
            <param name="buffer">The buffer to contain the bytes.</param>
            <param name="index">The position of the bytes in <paramref name="buffer"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.ArgumentException"><see cref="P:Support.Coding.Serialization.ConstantLengthSerializer`1.Count"/> is greater than the number of bytes from <paramref name="index"/> to the end of <paramref name="buffer"/> or another error occurred.</exception>
        </member>
        <member name="M:Support.Coding.Serialization.ConstantLengthSerializer`1.Deserialize(System.Byte[],System.Int32)">
            <summary>
            Deserializes bytes to an instance.
            </summary>
            <param name="buffer">The buffer to contain the bytes.</param>
            <param name="index">The position of the bytes in <paramref name="buffer"/>.</param>
            <returns>An instance deserialized from the bytes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.ArgumentException"><see cref="P:Support.Coding.Serialization.ConstantLengthSerializer`1.Count"/> is greater than the number of bytes from <paramref name="index"/> to the end of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred.</exception>
        </member>
        <member name="M:Support.Coding.Serialization.ConstantLengthSerializer`1.Deserialize(System.Byte[],System.Int32@)">
            <summary>
            Deserializes bytes to an instance and increases a specified index by the number of deserialized bytes.
            </summary>
            <param name="buffer">The buffer to contain the bytes.</param>
            <param name="index">The position of the bytes in <paramref name="buffer"/>.</param>
            <returns>An instance deserialized from the bytes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.ArgumentException"><see cref="P:Support.Coding.Serialization.ConstantLengthSerializer`1.Count"/> is greater than the number of bytes from <paramref name="index"/> to the end of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred.</exception>
        </member>
        <member name="T:Support.Coding.Serialization.DefaultableSerializerBuilder">
            <summary>
            Represents a builder of an <see cref="T:Support.Coding.Serialization.ISerializer`1"/> that can serialize null value of a reference type.
            </summary>
        </member>
        <member name="M:Support.Coding.Serialization.DefaultableSerializerBuilder.CreateSerializer``1(Support.Coding.Serialization.ISerializer{``0})">
            <summary>
            Creates an <see cref="T:Support.Coding.Serialization.ISerializer`1"/> that can serialize null value of a reference type.
            </summary>
            <param name="underlyingSerializer">The underlying <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the type.</param>
            <returns>An <see cref="T:Support.Coding.Serialization.ISerializer`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="underlyingSerializer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Support.Coding.Serialization.IConstantLengthSerializer`1">
            <summary>
            Represents a serializer that serializes instances of to a sequence of bytes with constant length and deserializes back
            </summary>
            <typeparam name="T">The type which instances are to be able to be serialized to a sequence of bytes with constant length and deserialized back.</typeparam>
        </member>
        <member name="P:Support.Coding.Serialization.IConstantLengthSerializer`1.Count">
            <summary>
            Gets the number of bytes requiring to serialize any instance of the type.
            </summary>
        </member>
        <member name="M:Support.Coding.Serialization.IConstantLengthSerializer`1.Deserialize(System.Byte[],System.Int32)">
            <summary>
            Deserializes bytes to an instance.
            </summary>
            <param name="buffer">The buffer to contain the bytes.</param>
            <param name="index">The position of the bytes in <paramref name="buffer"/>.</param>
            <returns>An instance deserialized from the bytes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.ArgumentException"><see cref="P:Support.Coding.Serialization.IConstantLengthSerializer`1.Count"/> is greater than the number of bytes from <paramref name="index"/> to the end of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred.</exception>
        </member>
        <member name="M:Support.Coding.Serialization.IConstantLengthSerializer`1.Deserialize(System.Byte[],System.Int32@)">
            <summary>
            Deserializes bytes to an instance and increases a specified index by the number of deserialized bytes.
            </summary>
            <param name="buffer">The buffer to contain the bytes.</param>
            <param name="index">The position of the bytes in <paramref name="buffer"/>.</param>
            <returns>An instance deserialized from the bytes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.ArgumentException"><see cref="P:Support.Coding.Serialization.IConstantLengthSerializer`1.Count"/> is greater than the number of bytes from <paramref name="index"/> to the end of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred.</exception>
        </member>
        <member name="T:Support.Coding.Serialization.ISerializer`1">
            <summary>
            Represents a serializer that serializes instances to a sequence of bytes and deserializes back. 
            </summary>
            <typeparam name="T">The type which instances are to be able to be serialized to a sequence of bytes and deserialized back.</typeparam>
        </member>
        <member name="M:Support.Coding.Serialization.ISerializer`1.Count(`0)">
            <summary>
            Counts a number of bytes requiring to serialize <paramref name="instance"/>.
            </summary>
            <param name="instance">An instance the number of bytes counts for.</param>
            <returns>A number of bytes requiring to serialize <paramref name="instance"/>.</returns>
            <exception cref="T:System.ArgumentException">An error occurred.</exception>
        </member>
        <member name="M:Support.Coding.Serialization.ISerializer`1.Serialize(`0,System.Byte[],System.Int32)">
            <summary>
            Serializes a specified instance to a sequence of bytes then writes the bytes to a specified buffer.
            </summary>
            <param name="instance">An instance to serialize.</param>
            <param name="buffer">The buffer to contain the bytes.</param>
            <param name="index">The position of the bytes in <paramref name="buffer"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred.</exception>
        </member>
        <member name="M:Support.Coding.Serialization.ISerializer`1.Serialize(`0,System.Byte[],System.Int32@)">
            <summary>
            Serializes a specified instance to a sequence of bytes then writes the bytes to a specified buffer and increases a specified index by the number of serialized bytes.
            </summary>
            <param name="instance">An instance to serialize.</param>
            <param name="buffer">The buffer to contain the bytes.</param>
            <param name="index">The position of the bytes in <paramref name="buffer"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred.</exception>
        </member>
        <member name="M:Support.Coding.Serialization.ISerializer`1.Deserialize(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Deserializes bytes to an instance.
            </summary>
            <param name="count">A number of bytes to deserialize.</param>
            <param name="buffer">The buffer to contain the bytes.</param>
            <param name="index">The position of the bytes in <paramref name="buffer"/>.</param>
            <returns>An instance deserialized from the bytes.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than 0"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> is greater than the number of bytes from <paramref name="index"/> to the end of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred.</exception>
        </member>
        <member name="M:Support.Coding.Serialization.ISerializer`1.Deserialize(System.Int32,System.Byte[],System.Int32@)">
            <summary>
            Deserializes bytes to an instance and increases a specified index by the number of deserialized bytes.
            </summary>
            <param name="count">A number of bytes to deserialize.</param>
            <param name="buffer">The buffer to contain the bytes.</param>
            <param name="index">The position of the bytes in <paramref name="buffer"/>.</param>
            <returns>An instance deserialized from the bytes.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> is greater than the number of bytes from <paramref name="index"/> to the end of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred.</exception>
        </member>
        <member name="T:Support.Coding.Serialization.Serializer`1">
            <summary>
            Represents an <see cref="T:Support.Coding.Serialization.ISerializer`1"/> implementation.
            </summary>
            <typeparam name="T">The type which instances are to be able to be serialized to a sequence of bytes and deserialized back.</typeparam>
        </member>
        <member name="M:Support.Coding.Serialization.Serializer`1.#ctor">
            <summary>
            Initializes the <see cref="T:Support.Coding.Serialization.Serializer`1"/>.
            </summary>
        </member>
        <member name="M:Support.Coding.Serialization.Serializer`1.ValidateCount(`0)">
            <summary>
            Validates arguments of <see cref="M:Support.Coding.Serialization.Serializer`1.Count(`0)"/> method.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Support.Coding.Serialization.Serializer`1.ValidateSerialize(System.Byte[],System.Int32)">
            <summary>
            Validates arguments of <see cref="M:Support.Coding.Serialization.Serializer`1.Serialize(`0,System.Byte[],System.Int32)"/> method.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="buffer"/>.</exception>
        </member>
        <member name="M:Support.Coding.Serialization.Serializer`1.ValidateSerialize(`0,System.Byte[],System.Int32)">
            <summary>
            Validates arguments of <see cref="M:Support.Coding.Serialization.Serializer`1.Serialize(`0,System.Byte[],System.Int32)"/> method.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="buffer"/>.</exception>
        </member>
        <member name="M:Support.Coding.Serialization.Serializer`1.ValidateDeserialize(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Validates arguments of <see cref="M:Support.Coding.Serialization.Serializer`1.Deserialize(System.Int32,System.Byte[],System.Int32)"/> method.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> is greater than the number of bytes from <paramref name="index"/> to the end of <paramref name="buffer"/>.</exception>
        </member>
        <member name="M:Support.Coding.Serialization.Serializer`1.Count(`0)">
            <summary>
            Counts a number of bytes requiring to serialize <paramref name="instance"/>.
            </summary>
            <param name="instance">An instance the number of bytes counts for.</param>
            <returns>A number of bytes requiring to serialize <paramref name="instance"/>.</returns>
            <exception cref="T:System.ArgumentException">An error occurred.</exception>
        </member>
        <member name="M:Support.Coding.Serialization.Serializer`1.Serialize(`0,System.Byte[],System.Int32@)">
            <summary>
            Serializes a specified instance to a sequence of bytes then writes the bytes to a specified buffer and increases a specified index by the number of serialized bytes.
            </summary>
            <param name="instance">An instance to serialize.</param>
            <param name="buffer">The buffer to contain the bytes.</param>
            <param name="index">The position of the bytes in <paramref name="buffer"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred.</exception>
        </member>
        <member name="M:Support.Coding.Serialization.Serializer`1.Serialize(`0,System.Byte[],System.Int32)">
            <summary>
            Serializes a specified instance to a sequence of bytes then writes the bytes to a specified buffer.
            </summary>
            <param name="instance">An instance to serialize.</param>
            <param name="buffer">The buffer to contain the bytes.</param>
            <param name="index">The position of the bytes in <paramref name="buffer"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred.</exception>
        </member>
        <member name="M:Support.Coding.Serialization.Serializer`1.Deserialize(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Deserializes bytes to an instance.
            </summary>
            <param name="count">A number of bytes to deserialize.</param>
            <param name="buffer">The buffer to contain the bytes.</param>
            <param name="index">The position of the bytes in <paramref name="buffer"/>.</param>
            <returns>An instance deserialized from the bytes.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> is greater than the number of bytes from <paramref name="index"/> to the end of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred.</exception>
        </member>
        <member name="M:Support.Coding.Serialization.Serializer`1.Deserialize(System.Int32,System.Byte[],System.Int32@)">
            <summary>
            Deserializes bytes to an instance and increases a specified index by the number of deserialized bytes.
            </summary>
            <param name="count">A number of bytes to deserialize.</param>
            <param name="buffer">The buffer to contain the bytes.</param>
            <param name="index">The position of the bytes in <paramref name="buffer"/>.</param>
            <returns>An instance deserialized from the bytes.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> is greater than the number of bytes from <paramref name="index"/> to the end of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.ArgumentException">An error occurred.</exception>
        </member>
        <member name="T:Support.Coding.Serialization.SerializerBuilder`1">
            <summary>
            Represents a builder of an <see cref="T:Support.Coding.Serialization.ISerializer`1"/>.
            </summary>
            <typeparam name="T">The type which instances are to be able to be serialize to a sequence of bytes and deserialize back.</typeparam>
        </member>
        <member name="F:Support.Coding.Serialization.SerializerBuilder`1.Default">
            <summary>
            The default <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the type.
            </summary>
        </member>
        <member name="M:Support.Coding.Serialization.SerializerBuilder`1.#ctor">
            <summary>
            Initializes the <see cref="T:Support.Coding.Serialization.SerializerBuilder`1"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The type is not public or the type is abstract type or the type does not have a public parameterless constructor.</exception>
        </member>
        <member name="M:Support.Coding.Serialization.SerializerBuilder`1.CreateSerializer">
            <summary>
            Creates an <see cref="T:Support.Coding.Serialization.ISerializer`1"/>.
            </summary>
            <returns>An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> built by the <see cref="T:Support.Coding.Serialization.SerializerBuilder`1"/>.</returns>
        </member>
        <member name="M:Support.Coding.Serialization.SerializerBuilder`1.AddField(System.Reflection.FieldInfo,System.Object)">
            <summary>
            Adds a field of the type to code.
            </summary>
            <param name="fieldInfo">The <see cref="T:System.Reflection.FieldInfo"/> of the field.</param>
            <param name="serializer">An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> to code the field.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldInfo"/> is <see langword="null"/> or <paramref name="serializer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The field is static or the field is not a public field of the type or the field is already added to the <see cref="T:Support.Coding.Serialization.SerializerBuilder`1"/> or <paramref name="serializer"/> type does not implement the <see cref="T:Support.Coding.Serialization.ISerializer`1"/> interface or the type of the field and <paramref name="serializer"/> type are not compatible.</exception>
        </member>
        <member name="M:Support.Coding.Serialization.SerializerBuilder`1.AddField``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Support.Coding.Serialization.ISerializer{``0})">
            <summary>
            Adds a field of the type to code.
            </summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="fieldExpression">The field expression to define the field. Example: t => t.Field.</param>
            <param name="serializer">An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> to code the field.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldExpression"/> is <see langword="null"/> or <paramref name="serializer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="fieldExpression"/> does not access to a non-static public field of the type or the field is already added to the <see cref="T:Support.Coding.Serialization.SerializerBuilder`1"/>.</exception>
        </member>
        <member name="T:Support.Coding.Serialization.System.BooleanSerializerBuilder">
            <summary>
            Represents a builder of an <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of the <see cref="T:System.Boolean"/> type.
            </summary>
        </member>
        <member name="F:Support.Coding.Serialization.System.BooleanSerializerBuilder.Default">
            <summary>
            The default serializer of the <see cref="T:System.Boolean"/> type.
            </summary>
        </member>
        <member name="T:Support.Coding.Serialization.System.ByteSerializerBuilder">
            <summary>
            Represents a builder of an <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of the <see cref="T:System.Byte"/> type.
            </summary>
        </member>
        <member name="F:Support.Coding.Serialization.System.ByteSerializerBuilder.Default">
            <summary>
            The default serializer of the <see cref="T:System.Byte"/> type.
            </summary>
        </member>
        <member name="T:Support.Coding.Serialization.System.CharSerializerBuilder">
            <summary>
            Represents a builder of an <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of the <see cref="T:System.Char"/> type.
            </summary>
        </member>
        <member name="F:Support.Coding.Serialization.System.CharSerializerBuilder.Default">
            <summary>
            The default serializer of the <see cref="T:System.Char"/> type.
            </summary>
        </member>
        <member name="T:Support.Coding.Serialization.System.Collections.Generic.ArraySerializerBuilder">
            <summary>
            Represents a builder of serializers of the first rank array type.
            </summary>
        </member>
        <member name="M:Support.Coding.Serialization.System.Collections.Generic.ArraySerializerBuilder.CreateSerializer``1(Support.Coding.Serialization.ISerializer{``0})">
            <summary>
            Creates an <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the first rank array type.
            </summary>
            <typeparam name="T">The type of elements of a first rank array.</typeparam>
            <param name="elementSerializer">An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of elements.</param>
            <returns>An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the first rank array type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="elementSerializer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Support.Coding.Serialization.System.Collections.Generic.ArraySerializerBuilder.CreateSerializer``1(Support.Coding.Serialization.IConstantLengthSerializer{``0})">
            <summary>
            Creates an <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the first rank array type.
            </summary>
            <typeparam name="T">The type of elements of a first rank array.</typeparam>
            <param name="elementSerializer">An <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of elements.</param>
            <returns>An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the first rank array type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="elementSerializer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Support.Coding.Serialization.System.Collections.Generic.DictionarySerializerBuilder">
            <summary>
            Represents a builder of serializers of the <see cref="T:System.Collections.Generic.Dictionary`2"/> type.
            </summary>
        </member>
        <member name="M:Support.Coding.Serialization.System.Collections.Generic.DictionarySerializerBuilder.CreateSerializer``2(Support.Coding.Serialization.ISerializer{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Creates an <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.Dictionary`2"/> type.
            </summary>
            <typeparam name="TKey">The type of keys.</typeparam>
            <typeparam name="TValue">The type of values.</typeparam>
            <param name="elementSerializer">An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of elements.</param>
            <returns>An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.Dictionary`2"/> type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="elementSerializer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Support.Coding.Serialization.System.Collections.Generic.DictionarySerializerBuilder.CreateSerializer``2(Support.Coding.Serialization.IConstantLengthSerializer{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Creates an <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.Dictionary`2"/> type.
            </summary>
            <typeparam name="TKey">The type of keys.</typeparam>
            <typeparam name="TValue">The type of values.</typeparam>
            <param name="elementSerializer">An <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of elements.</param>
            <returns>An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.Dictionary`2"/> type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="elementSerializer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Support.Coding.Serialization.System.Collections.Generic.HashSetSerializerBuilder">
            <summary>
            Represents a builder of serializers of the <see cref="T:System.Collections.Generic.HashSet`1"/> type.
            </summary>
        </member>
        <member name="M:Support.Coding.Serialization.System.Collections.Generic.HashSetSerializerBuilder.CreateSerializer``1(Support.Coding.Serialization.ISerializer{``0})">
            <summary>
            Creates an <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.HashSet`1"/> type.
            </summary>
            <typeparam name="T">The type of elements of a <see cref="T:System.Collections.Generic.HashSet`1"/>.</typeparam>
            <param name="elementSerializer">An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of elements.</param>
            <returns>An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.HashSet`1"/> type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="elementSerializer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Support.Coding.Serialization.System.Collections.Generic.HashSetSerializerBuilder.CreateSerializer``1(Support.Coding.Serialization.IConstantLengthSerializer{``0})">
            <summary>
            Creates an <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.HashSet`1"/> type.
            </summary>
            <typeparam name="T">The type of elements of a <see cref="T:System.Collections.Generic.HashSet`1"/>.</typeparam>
            <param name="elementSerializer">An <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of elements.</param>
            <returns>An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.HashSet`1"/> type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="elementSerializer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Support.Coding.Serialization.System.Collections.Generic.ICollectionSerializerBuilder">
            <summary>
            Represents a builder of serializers of the <see cref="T:System.Collections.Generic.ICollection`1"/> type.
            </summary>
        </member>
        <member name="M:Support.Coding.Serialization.System.Collections.Generic.ICollectionSerializerBuilder.CreateSerializer``1(Support.Coding.Serialization.ISerializer{``0})">
            <summary>
            Creates an <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.ICollection`1"/> type.
            </summary>
            <typeparam name="T">The type of elements of an <see cref="T:System.Collections.Generic.ICollection`1"/>.</typeparam>
            <param name="elementSerializer">An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of elements.</param>
            <returns>An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.ICollection`1"/> type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="elementSerializer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Support.Coding.Serialization.System.Collections.Generic.ICollectionSerializerBuilder.CreateSerializer``1(Support.Coding.Serialization.IConstantLengthSerializer{``0})">
            <summary>
            Creates an <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.ICollection`1"/> type.
            </summary>
            <typeparam name="T">The type of elements of an <see cref="T:System.Collections.Generic.ICollection`1"/>.</typeparam>
            <param name="elementSerializer">An <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of elements.</param>
            <returns>An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.ICollection`1"/> type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="elementSerializer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Support.Coding.Serialization.System.Collections.Generic.IEnumerableSerializerBuilder">
            <summary>
            Represents a builder of serializers of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> type.
            </summary>
        </member>
        <member name="M:Support.Coding.Serialization.System.Collections.Generic.IEnumerableSerializerBuilder.CreateSerializer``1(Support.Coding.Serialization.ISerializer{``0})">
            <summary>
            Creates an <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> type.
            </summary>
            <typeparam name="T">The type of elements of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="elementSerializer">An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of elements.</param>
            <returns>An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="elementSerializer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Support.Coding.Serialization.System.Collections.Generic.IEnumerableSerializerBuilder.CreateSerializer``1(Support.Coding.Serialization.IConstantLengthSerializer{``0})">
            <summary>
            Creates an <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> type.
            </summary>
            <typeparam name="T">The type of elements of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="elementSerializer">An <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of elements.</param>
            <returns>An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="elementSerializer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Support.Coding.Serialization.System.Collections.Generic.IListSerializerBuilder">
            <summary>
            Represents a builder of serializers of the <see cref="T:System.Collections.Generic.IList`1"/> type.
            </summary>
        </member>
        <member name="M:Support.Coding.Serialization.System.Collections.Generic.IListSerializerBuilder.CreateSerializer``1(Support.Coding.Serialization.ISerializer{``0})">
            <summary>
            Creates an <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.IList`1"/> type.
            </summary>
            <typeparam name="T">The type of elements of an <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="elementSerializer">An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of elements.</param>
            <returns>An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.IList`1"/> type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="elementSerializer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Support.Coding.Serialization.System.Collections.Generic.IListSerializerBuilder.CreateSerializer``1(Support.Coding.Serialization.IConstantLengthSerializer{``0})">
            <summary>
            Creates an <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.IList`1"/> type.
            </summary>
            <typeparam name="T">The type of elements of an <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="elementSerializer">An <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of elements.</param>
            <returns>An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.IList`1"/> type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="elementSerializer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Support.Coding.Serialization.System.Collections.Generic.ISetSerializerBuilder">
            <summary>
            Represents a builder of serializers of the <see cref="T:System.Collections.Generic.ISet`1"/> type.
            </summary>
        </member>
        <member name="M:Support.Coding.Serialization.System.Collections.Generic.ISetSerializerBuilder.CreateSerializer``1(Support.Coding.Serialization.ISerializer{``0})">
            <summary>
            Creates an <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.ISet`1"/> type.
            </summary>
            <typeparam name="T">The type of elements of an <see cref="T:System.Collections.Generic.ISet`1"/>.</typeparam>
            <param name="elementSerializer">An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of elements.</param>
            <returns>An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.ISet`1"/> type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="elementSerializer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Support.Coding.Serialization.System.Collections.Generic.ISetSerializerBuilder.CreateSerializer``1(Support.Coding.Serialization.IConstantLengthSerializer{``0})">
            <summary>
            Creates an <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.ISet`1"/> type.
            </summary>
            <typeparam name="T">The type of elements of an <see cref="T:System.Collections.Generic.ISet`1"/>.</typeparam>
            <param name="elementSerializer">An <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of elements.</param>
            <returns>An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.ISet`1"/> type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="elementSerializer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Support.Coding.Serialization.System.Collections.Generic.KeyValuePairSerializerBuilder">
            <summary>
            Represents a builder of serializers of the <see cref="T:System.Collections.Generic.KeyValuePair`2"/> type.
            </summary>
        </member>
        <member name="M:Support.Coding.Serialization.System.Collections.Generic.KeyValuePairSerializerBuilder.CreateSerializer``2(Support.Coding.Serialization.ISerializer{``0},Support.Coding.Serialization.ISerializer{``1})">
            <summary>
            Creates an <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.KeyValuePair`2"/> type.
            </summary>
            <typeparam name="TKey">The type of a key.</typeparam>
            <typeparam name="TValue">The type of a value.</typeparam>
            <param name="keySerializer">An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <typeparamref name="TKey"/> type.</param>
            <param name="valueSerializer">An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <typeparamref name="TValue"/> type.</param>
            <returns>An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.KeyValuePair`2"/> type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keySerializer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="valueSerializer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Support.Coding.Serialization.System.Collections.Generic.KeyValuePairSerializerBuilder.CreateSerializer``2(Support.Coding.Serialization.ISerializer{``0},Support.Coding.Serialization.IConstantLengthSerializer{``1})">
            <summary>
            Creates an <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.KeyValuePair`2"/> type.
            </summary>
            <typeparam name="TKey">The type of a key.</typeparam>
            <typeparam name="TValue">The type of a value.</typeparam>
            <param name="keySerializer">An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <typeparamref name="TKey"/> type.</param>
            <param name="valueSerializer">An <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of the <typeparamref name="TValue"/> type.</param>
            <returns>An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.KeyValuePair`2"/> type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keySerializer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="valueSerializer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Support.Coding.Serialization.System.Collections.Generic.KeyValuePairSerializerBuilder.CreateSerializer``2(Support.Coding.Serialization.IConstantLengthSerializer{``0},Support.Coding.Serialization.ISerializer{``1})">
            <summary>
            Creates an <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.KeyValuePair`2"/> type.
            </summary>
            <typeparam name="TKey">The type of a key.</typeparam>
            <typeparam name="TValue">The type of a value.</typeparam>
            <param name="keySerializer">An <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of the <typeparamref name="TKey"/> type.</param>
            <param name="valueSerializer">An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <typeparamref name="TValue"/> type.</param>
            <returns>An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.KeyValuePair`2"/> type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keySerializer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="valueSerializer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Support.Coding.Serialization.System.Collections.Generic.KeyValuePairSerializerBuilder.CreateSerializer``2(Support.Coding.Serialization.IConstantLengthSerializer{``0},Support.Coding.Serialization.IConstantLengthSerializer{``1})">
            <summary>
            Returns an <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of the <see cref="T:System.Collections.Generic.KeyValuePair`2"/> type.
            </summary>
            <typeparam name="TKey">The type of a key.</typeparam>
            <typeparam name="TValue">The type of a value.</typeparam>
            <param name="keySerializer">An <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of the <typeparamref name="TKey"/> type.</param>
            <param name="valueSerializer">An <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of the <typeparamref name="TValue"/> type.</param>
            <returns>An <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of the <see cref="T:System.Collections.Generic.KeyValuePair`2"/> type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keySerializer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="valueSerializer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Support.Coding.Serialization.System.Collections.Generic.ListSerializerBuilder">
            <summary>
            Represents a builder of serializers of the <see cref="T:System.Collections.Generic.List`1"/> type.
            </summary>
        </member>
        <member name="M:Support.Coding.Serialization.System.Collections.Generic.ListSerializerBuilder.CreateSerializer``1(Support.Coding.Serialization.ISerializer{``0})">
            <summary>
            Creates an <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.List`1"/> type.
            </summary>
            <typeparam name="T">The type of elements of a <see cref="T:System.Collections.Generic.List`1"/>.</typeparam>
            <param name="elementSerializer">An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of elements.</param>
            <returns>An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.List`1"/> type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="elementSerializer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Support.Coding.Serialization.System.Collections.Generic.ListSerializerBuilder.CreateSerializer``1(Support.Coding.Serialization.IConstantLengthSerializer{``0})">
            <summary>
            Creates an <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.List`1"/> type.
            </summary>
            <typeparam name="T">The type of elements of a <see cref="T:System.Collections.Generic.List`1"/>.</typeparam>
            <param name="elementSerializer">An <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of elements.</param>
            <returns>An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.List`1"/> type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="elementSerializer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Support.Coding.Serialization.System.Collections.Generic.QueueSerializerBuilder">
            <summary>
            Represents a builder of serializers of the <see cref="T:System.Collections.Generic.Queue`1"/> type.
            </summary>
        </member>
        <member name="M:Support.Coding.Serialization.System.Collections.Generic.QueueSerializerBuilder.CreateSerializer``1(Support.Coding.Serialization.ISerializer{``0})">
            <summary>
            Creates an <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.Queue`1"/> type.
            </summary>
            <typeparam name="T">The type of elements of an <see cref="T:System.Collections.Generic.Queue`1"/>.</typeparam>
            <param name="elementSerializer">An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of elements.</param>
            <returns>An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.Queue`1"/> type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="elementSerializer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Support.Coding.Serialization.System.Collections.Generic.QueueSerializerBuilder.CreateSerializer``1(Support.Coding.Serialization.IConstantLengthSerializer{``0})">
            <summary>
            Creates an <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.Queue`1"/> type.
            </summary>
            <typeparam name="T">The type of elements of an <see cref="T:System.Collections.Generic.Queue`1"/>.</typeparam>
            <param name="elementSerializer">An <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of elements.</param>
            <returns>An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.Queue`1"/> type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="elementSerializer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Support.Coding.Serialization.System.Collections.Generic.StackSerializerBuilder">
            <summary>
            Represents a builder of serializers of the <see cref="T:System.Collections.Generic.Stack`1"/> type.
            </summary>
        </member>
        <member name="M:Support.Coding.Serialization.System.Collections.Generic.StackSerializerBuilder.CreateSerializer``1(Support.Coding.Serialization.ISerializer{``0})">
            <summary>
            Creates an <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.Stack`1"/> type.
            </summary>
            <typeparam name="T">The type of elements of an <see cref="T:System.Collections.Generic.Stack`1"/>.</typeparam>
            <param name="elementSerializer">An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of elements.</param>
            <returns>An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.Stack`1"/> type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="elementSerializer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Support.Coding.Serialization.System.Collections.Generic.StackSerializerBuilder.CreateSerializer``1(Support.Coding.Serialization.IConstantLengthSerializer{``0})">
            <summary>
            Creates an <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.Stack`1"/> type.
            </summary>
            <typeparam name="T">The type of elements of an <see cref="T:System.Collections.Generic.Stack`1"/>.</typeparam>
            <param name="elementSerializer">An <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of elements.</param>
            <returns>An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Collections.Generic.Stack`1"/> type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="elementSerializer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Support.Coding.Serialization.System.DateTimeSerializerBuilder">
            <summary>
            Represents a builder of an <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of the <see cref="T:System.DateTime"/> type.
            </summary>
        </member>
        <member name="F:Support.Coding.Serialization.System.DateTimeSerializerBuilder.Default">
            <summary>
            The default serializer of the <see cref="T:System.DateTime"/> type.
            </summary>
        </member>
        <member name="T:Support.Coding.Serialization.System.DecimalSerializerBuilder">
            <summary>
            Represents a builder of an <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of the <see cref="T:System.Decimal"/> type.
            </summary>
        </member>
        <member name="F:Support.Coding.Serialization.System.DecimalSerializerBuilder.Default">
            <summary>
            The default serializer of the <see cref="T:System.Decimal"/> type.
            </summary>
        </member>
        <member name="T:Support.Coding.Serialization.System.DoubleSerializerBuilder">
            <summary>
            Represents a builder of an <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of the <see cref="T:System.Double"/> type.
            </summary>
        </member>
        <member name="F:Support.Coding.Serialization.System.DoubleSerializerBuilder.Default">
            <summary>
            The default serializer of the <see cref="T:System.Double"/> type.
            </summary>
        </member>
        <member name="T:Support.Coding.Serialization.System.GuidSerializerBuilder">
            <summary>
            Represents a builder of an <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of the <see cref="T:System.Guid"/> type.
            </summary>
        </member>
        <member name="F:Support.Coding.Serialization.System.GuidSerializerBuilder.Default">
            <summary>
            The default serializer of the <see cref="T:System.Guid"/> type.
            </summary>
        </member>
        <member name="T:Support.Coding.Serialization.System.Int16SerializerBuilder">
            <summary>
            Represents a builder of an <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of the <see cref="T:System.Int16"/> type.
            </summary>
        </member>
        <member name="F:Support.Coding.Serialization.System.Int16SerializerBuilder.Default">
            <summary>
            The default serializer of the <see cref="T:System.Int16"/> type.
            </summary>
        </member>
        <member name="T:Support.Coding.Serialization.System.Int32SerializerBuilder">
            <summary>
            Represents a builder of an <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of the <see cref="T:System.Int32"/> type.
            </summary>
        </member>
        <member name="F:Support.Coding.Serialization.System.Int32SerializerBuilder.Default">
            <summary>
            The default serializer of the <see cref="T:System.Int32"/> type.
            </summary>
        </member>
        <member name="T:Support.Coding.Serialization.System.Int64SerializerBuilder">
            <summary>
            Represents a builder of an <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of the <see cref="T:System.Int64"/> type.
            </summary>
        </member>
        <member name="F:Support.Coding.Serialization.System.Int64SerializerBuilder.Default">
            <summary>
            The default serializer of the <see cref="T:System.Int64"/> type.
            </summary>
        </member>
        <member name="T:Support.Coding.Serialization.System.NullableSerializerBuilder">
            <summary>
            Represents a builder of an <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Nullable`1"/> type.
            </summary>
        </member>
        <member name="M:Support.Coding.Serialization.System.NullableSerializerBuilder.CreateSerializer``1(Support.Coding.Serialization.ISerializer{``0})">
            <summary>
            Builds an <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.Nullable`1"/> type.
            </summary>
            <typeparam name="T">The underlying value type of the <see cref="T:System.Nullable`1"/>.</typeparam>
            <param name="underlyingSerializer">The underlying <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the underlying value type.</param>
            <returns>An <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of <see cref="T:System.Nullable`1"/> instances.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="underlyingSerializer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Support.Coding.Serialization.System.SByteSerializerBuilder">
            <summary>
            Represents a builder of an <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of the <see cref="T:System.SByte"/> type.
            </summary>
        </member>
        <member name="F:Support.Coding.Serialization.System.SByteSerializerBuilder.Default">
            <summary>
            The default serializer of the <see cref="T:System.SByte"/> type.
            </summary>
        </member>
        <member name="T:Support.Coding.Serialization.System.SingleSerializerBuilder">
            <summary>
            Represents a builder of an <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of the <see cref="T:System.Single"/> type.
            </summary>
        </member>
        <member name="F:Support.Coding.Serialization.System.SingleSerializerBuilder.Default">
            <summary>
            The default serializer of the <see cref="T:System.Single"/> type.
            </summary>
        </member>
        <member name="T:Support.Coding.Serialization.System.StringSerializerBuilder">
            <summary>
            Represents a builder of <see cref="T:Support.Coding.Serialization.ISerializer`1"/> instances of the <see cref="T:System.String"/> type.
            </summary>
        </member>
        <member name="F:Support.Coding.Serialization.System.StringSerializerBuilder.UTF8">
            <summary>
            The serializer of the <see cref="T:System.String"/> type. The <see cref="T:Support.Coding.Serialization.Serializer`1"/> uses <see cref="P:System.Text.Encoding.UTF8"/> encoding.
            </summary>
        </member>
        <member name="F:Support.Coding.Serialization.System.StringSerializerBuilder.UTF7">
            <summary>
            The serializer of the <see cref="T:System.String"/> type. The <see cref="T:Support.Coding.Serialization.Serializer`1"/> uses <see cref="P:System.Text.Encoding.UTF7"/> encoding.
            </summary>
        </member>
        <member name="F:Support.Coding.Serialization.System.StringSerializerBuilder.UTF32">
            <summary>
            The serializer of the <see cref="T:System.String"/> type. The <see cref="T:Support.Coding.Serialization.Serializer`1"/> uses <see cref="P:System.Text.Encoding.UTF32"/> encoding.
            </summary>
        </member>
        <member name="F:Support.Coding.Serialization.System.StringSerializerBuilder.Unicode">
            <summary>
            The serializer of the <see cref="T:System.String"/> type. The <see cref="T:Support.Coding.Serialization.Serializer`1"/> uses <see cref="P:System.Text.Encoding.Unicode"/> encoding.
            </summary>
        </member>
        <member name="F:Support.Coding.Serialization.System.StringSerializerBuilder.BigEndianUnicode">
            <summary>
            The serializer of the <see cref="T:System.String"/> type. The <see cref="T:Support.Coding.Serialization.Serializer`1"/> uses <see cref="P:System.Text.Encoding.BigEndianUnicode"/> encoding.
            </summary>
        </member>
        <member name="F:Support.Coding.Serialization.System.StringSerializerBuilder.ASCII">
            <summary>
            The serializer of the <see cref="T:System.String"/> type. The <see cref="T:Support.Coding.Serialization.Serializer`1"/> uses <see cref="P:System.Text.Encoding.ASCII"/> encoding.
            </summary>
        </member>
        <member name="F:Support.Coding.Serialization.System.StringSerializerBuilder.Default">
            <summary>
            The serializer of the <see cref="T:System.String"/> type. The <see cref="T:Support.Coding.Serialization.Serializer`1"/> uses <see cref="P:System.Text.Encoding.Default"/> encoding.
            </summary>
        </member>
        <member name="M:Support.Coding.Serialization.System.StringSerializerBuilder.CreateSerializer(System.Text.Encoding)">
            <summary>
            Builds an <see cref="T:Support.Coding.Serialization.ISerializer`1"/> of the <see cref="T:System.String"/> type.
            </summary>
            <param name="encoding">An <see cref="T:System.Text.Encoding"/> to code strings.</param>
            <returns>An <see cref="T:Support.Coding.Serialization.ISerializer`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="encoding"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Support.Coding.Serialization.System.TimeSpanSerializerBuilder">
            <summary>
            Represents a builder of an <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of the <see cref="T:System.TimeSpan"/> type.
            </summary>
        </member>
        <member name="F:Support.Coding.Serialization.System.TimeSpanSerializerBuilder.Default">
            <summary>
            The default serializer of the <see cref="T:System.TimeSpan"/> type.
            </summary>
        </member>
        <member name="T:Support.Coding.Serialization.System.UInt16SerializerBuilder">
            <summary>
            Represents a builder of an <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of the <see cref="T:System.UInt16"/> type.
            </summary>
        </member>
        <member name="F:Support.Coding.Serialization.System.UInt16SerializerBuilder.Default">
            <summary>
            The default serializer of the <see cref="T:System.UInt16"/> type.
            </summary>
        </member>
        <member name="T:Support.Coding.Serialization.System.UInt32SerializerBuilder">
            <summary>
            Represents a builder of an <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of the <see cref="T:System.UInt32"/> type.
            </summary>
        </member>
        <member name="F:Support.Coding.Serialization.System.UInt32SerializerBuilder.Default">
            <summary>
            The default serializer of the <see cref="T:System.UInt32"/> type.
            </summary>
        </member>
        <member name="T:Support.Coding.Serialization.System.UInt64SerializerBuilder">
            <summary>
            Represents a builder of an <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of the <see cref="T:System.UInt64"/> type.
            </summary>
        </member>
        <member name="F:Support.Coding.Serialization.System.UInt64SerializerBuilder.Default">
            <summary>
            The default serializer of the <see cref="T:System.UInt64"/> type.
            </summary>
        </member>
        <member name="T:Support.EventTracker`1">
            <summary>
            References a method to be executed when the event occurs.
            </summary>
            <typeparam name="TSource">The type of the source of the event.</typeparam>
            <param name="source">The source of the event.</param>
        </member>
        <member name="T:Support.EventTracker`2">
            <summary>
            References a method to be executed when the event occurs.
            </summary>
            <typeparam name="TSource">The type of the source of the event.</typeparam>
            <typeparam name="TArgument">The type of the argument of the event.</typeparam>
            <param name="source">The source of the event.</param>
            <param name="argument">The argument of the event.</param>
        </member>
        <member name="T:Support.InputOutput.Communication.IIPEndPoint">
            <summary>
            Represents a network endpoint as an IP address and a port number.
            </summary>
        </member>
        <member name="M:Support.InputOutput.Communication.IIPEndPoint.CreateIPEndPoint">
            <summary>
            Creates an <see cref="T:System.Net.IPEndPoint"/> instance containing the IP address and the port.
            </summary>
            <returns>An <see cref="T:System.Net.IPEndPoint"/> instance containing the IP address and the port.</returns>
        </member>
        <member name="T:Support.InputOutput.Communication.IPv4EndPoint">
            <summary>
            Represents a network endpoint as an IPv4 address and a port number.
            </summary>
        </member>
        <member name="M:Support.InputOutput.Communication.IPv4EndPoint.FromIPEndPoint(System.Net.IPEndPoint)">
            <summary>
            Initializes the <see cref="T:Support.InputOutput.Communication.IPv4EndPoint"/>.
            </summary>
            <param name="endPoint">An <see cref="T:System.Net.IPEndPoint"/> containing the IP address and the port.</param>
            <exception cref="T:System.ArgumentException"><paramref name="endPoint"/> is not IPv4 endpoint.</exception>
        </member>
        <member name="M:Support.InputOutput.Communication.IPv4EndPoint.op_Equality(Support.InputOutput.Communication.IPv4EndPoint,Support.InputOutput.Communication.IPv4EndPoint)">
            <summary>
            Determines whether two specified IPv4 endpoints have the same value.
            </summary>
            <param name="a">The first IPv4 endpoint to compare.</param>
            <param name="b">The second IPv4 endpoint to compare.</param>
            <returns><see langword="true"/> whether the value of <paramref name="a"/> is the same as the value of <paramref name="b"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Support.InputOutput.Communication.IPv4EndPoint.op_Inequality(Support.InputOutput.Communication.IPv4EndPoint,Support.InputOutput.Communication.IPv4EndPoint)">
            <summary>
            Determines whether two specified IPv4 endpoints have different values.
            </summary>
            <param name="a">The first IPv4 endpoint to compare.</param>
            <param name="b">The second IPv4 endpoint to compare.</param>
            <returns><see langword="true"/> whether the value of <paramref name="a"/> is different from the value of <paramref name="b"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="F:Support.InputOutput.Communication.IPv4EndPoint.Address">
            <summary>
            The address of the IPv4 endpoint.
            </summary>
        </member>
        <member name="F:Support.InputOutput.Communication.IPv4EndPoint.Port">
            <summary>
            The port of the IPv4 endpoint.
            </summary>
        </member>
        <member name="M:Support.InputOutput.Communication.IPv4EndPoint.#ctor(System.UInt32,System.UInt16)">
            <summary>
            Initializes the <see cref="T:Support.InputOutput.Communication.IPv4EndPoint"/>.
            </summary>
            <param name="address">The address of the IPv4 endpoint.</param>
            <param name="port">The port of the IPv4 endpoint.</param>
        </member>
        <member name="M:Support.InputOutput.Communication.IPv4EndPoint.#ctor(System.Byte,System.Byte,System.Byte,System.Byte,System.UInt16)">
            <summary>
            Initializes the <see cref="T:Support.InputOutput.Communication.IPv4EndPoint"/>.
            </summary>
            <param name="firstAddressPart">The first part of address of the IPv4 endpoint.</param>
            <param name="secondAddressPart">The second part of address of the IPv4 endpoint.</param>
            <param name="thirdAddressPart">The third part of address of the IPv4 endpoint.</param>
            <param name="fourthAddressPart">The fourth part of address of the IPv4 endpoint.</param>
            <param name="port">The port of the IPv4 endpoint.</param>
        </member>
        <member name="M:Support.InputOutput.Communication.IPv4EndPoint.CreateIPEndPoint">
            <summary>
            Creates an <see cref="T:System.Net.IPEndPoint"/> instance containing the IP address and the port.
            </summary>
            <returns>An <see cref="T:System.Net.IPEndPoint"/> instance containing the IP address and the port.</returns>
        </member>
        <member name="M:Support.InputOutput.Communication.IPv4EndPoint.Equals(System.Object)">
            <summary>
            Determines whether this IPv4 end point and a specified object, which must also be a <see cref="T:Support.InputOutput.Communication.IPv4EndPoint"/> object, have the same value.
            </summary>
            <param name="obj">The IPv4 end point to compare to this instance.</param>
            <returns><see langword="true"/> whether <paramref name="obj"/> is an <see cref="T:Support.InputOutput.Communication.IPv4EndPoint"/> and its value is the same as this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Support.InputOutput.Communication.IPv4EndPoint.GetHashCode">
            <summary>
            Returns the hash code for this IPv4 end point.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Support.InputOutput.Communication.IPv4EndPoint.ToString">
            <summary>
            Returns a string that represents the current IPv4 endpoint.
            </summary>
            <returns>A string that represents the current IPv4 endpoint.</returns>
        </member>
        <member name="T:Support.InputOutput.Communication.IPv4EndPointSerializerBuilder">
            <summary>
            Represents a builder of an <see cref="T:Support.Coding.Serialization.IConstantLengthSerializer`1"/> of the <see cref="T:Support.InputOutput.Communication.IPv4EndPoint"/> type.
            </summary>
        </member>
        <member name="F:Support.InputOutput.Communication.IPv4EndPointSerializerBuilder.Default">
            <summary>
            The default serializer of the <see cref="T:Support.InputOutput.Communication.IPv4EndPoint"/> type.
            </summary>
        </member>
        <member name="T:Support.PseudoRandomManager">
            <summary>
            Provides methods to get pseudo-random data.
            </summary>
        </member>
        <member name="M:Support.PseudoRandomManager.GetInt32">
            <summary>
            Returns a pseudo-random <see cref="T:System.Int32"/>.
            </summary>
            <returns>A pseudo-random <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Support.PseudoRandomManager.GetInt32(System.Int32,System.Int32)">
            <summary>
            Returns a pseudo-random <see cref="T:System.Int32"/> that is within a specified range.
            </summary>
            <param name="min">The minimum value for the number to be generated.</param>
            <param name="max">The maximum value for the number to be generated.</param>
            <returns>A number that is greater than or equal to <paramref name="min"/> and less than or equal to <paramref name="max"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="min"/> equals to <see cref="F:System.Int32.MinValue"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="max"/> is less than <paramref name="min"/>.</exception>
        </member>
        <member name="M:Support.PseudoRandomManager.GetNonPositiveInt32">
            <summary>
            Returns a pseudo-random <see cref="T:System.Int32"/> that is less than or equal to 0.
            </summary>
            <returns>A pseudo-random <see cref="T:System.Int32"/> that is less than or equal to 0.</returns>
        </member>
        <member name="M:Support.PseudoRandomManager.GetNonPositiveInt32(System.Int32)">
            <summary>
            Returns a pseudo-random <see cref="T:System.Int32"/> that is less than or equal to 0 and greater than or equal to a specified minimum value.
            </summary>
            <param name="min">The minimum value for the number to be generated.</param>
            <returns>A number that is less than or equal to 0 and greater than or equal to <paramref name="min"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="min"/> is greater than 0 or equal to <see cref="F:System.Int32.MinValue"/>.</exception>
        </member>
        <member name="M:Support.PseudoRandomManager.GetNonPositiveInt32(System.Int32,System.Int32)">
            <summary>
            Returns a pseudo-random <see cref="T:System.Int32"/> that is within a specified range.
            </summary>
            <param name="min">The minimum value for the number to be generated.</param>
            <param name="max">The maximum value for the number to be generated.</param>
            <returns>A number that is greater than or equal to <paramref name="min"/> and less than or equal <paramref name="max"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="max"/> is greater than 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="min"/> is greater than <paramref name="max"/> or equal to <see cref="F:System.Int32.MinValue"/>.</exception>
        </member>
        <member name="M:Support.PseudoRandomManager.GetNonNegativeInt32">
            <summary>
            Returns a pseudo-random <see cref="T:System.Int32"/> that is greater than or equal to 0.
            </summary>
            <returns>A pseudo-random <see cref="T:System.Int32"/> that is greater than or equal to 0.</returns>
        </member>
        <member name="M:Support.PseudoRandomManager.GetNonNegativeInt32(System.Int32)">
            <summary>
            Returns a pseudo-random <see cref="T:System.Int32"/> that is greater than or equal to 0 and less than or equal to a specified maximum value.
            </summary>
            <param name="max">The maximum value for the number to be generated.</param>
            <returns>A number that is greater than or equal to 0 and less than or equal to <paramref name="max"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="max"/> is less than 0.</exception>
        </member>
        <member name="M:Support.PseudoRandomManager.GetNonNegativeInt32(System.Int32,System.Int32)">
            <summary>
            Returns a pseudo-random <see cref="T:System.Int32"/> that is within a specified range.
            </summary>
            <param name="min">The minimum value for the number to be generated.</param>
            <param name="max">The maximum value for the number to be generated.</param>
            <returns>A number that is greater than or equal to <paramref name="min"/> and less than or equal to <paramref name="max"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="min"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="max"/> is less than <paramref name="min"/>.</exception>
        </member>
        <member name="M:Support.PseudoRandomManager.GetInt32Remainder(System.Int32)">
            <summary>
            Returns a remainder of positive pseudo-random number division by a specified divider.
            </summary>
            <param name="divider">The divider.</param>
            <returns>A remainder of positive pseudo-random number division by <paramref name="divider"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="divider"/> is less than 1.</exception>
        </member>
        <member name="M:Support.PseudoRandomManager.GetSingleFloat">
            <summary>
            Returns a pseudo-random <see cref="T:System.Single"/> that is greater than -1F and less than 1F.
            </summary>
            <returns>A pseudo-random <see cref="T:System.Single"/> that is greater than -1F and less than 1F.</returns>
        </member>
        <member name="M:Support.PseudoRandomManager.GetNonPositiveSingleFloat">
            <summary>
            Returns a pseudo-random <see cref="T:System.Single"/> that is greater than -1F and less than or equal to 0.
            </summary>
            <returns>A pseudo-random <see cref="T:System.Single"/> that is greater than -1F and less than 0.</returns>
        </member>
        <member name="M:Support.PseudoRandomManager.GetNonNegativeSingleFloat">
            <summary>
            Returns a pseudo-random <see cref="T:System.Single"/> that is greater than or equal to 0 and less than 1F.
            </summary>
            <returns>A pseudo-random <see cref="T:System.Single"/> that is greater than or equal to 0 and less than 1F.</returns>
        </member>
        <member name="M:Support.PseudoRandomManager.GetBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Puts pseudo-random bytes to a specified buffer.
            </summary>
            <param name="buffer">The buffer to contain the bytes.</param>
            <param name="index">The position of the bytes in <paramref name="buffer"/>.</param>
            <param name="count">The number of the bytes.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the range of valid indices of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> is greater than the number of bytes from <paramref name="index"/> to the end of <paramref name="buffer"/>.</exception>
        </member>
        <member name="T:Support.RandomManager">
            <summary>
            Provides methods to get random data.
            </summary>
        </member>
        <member name="M:Support.RandomManager.GetBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Puts random bytes to a specified buffer.
            </summary>
            <param name="buffer">The buffer to contain the bytes.</param>
            <param name="index">The position of the bytes in <paramref name="buffer"/>.</param>
            <param name="count">The number of the bytes.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the range of valid indices of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> is greater than the number of bytes from <paramref name="index"/> to the end of <paramref name="buffer"/>.</exception>
        </member>
        <member name="T:Support.Sets.CubicComparisonResults">
            <summary>
            Specifies the results of cubic set elements comparison.
            </summary>
        </member>
        <member name="F:Support.Sets.CubicComparisonResults.Default">
            <summary>
            Specifies that the all coordinates of the element is less than the all coordinates of another element respectively.
            </summary>
        </member>
        <member name="F:Support.Sets.CubicComparisonResults.Equals">
            <summary>
            Specifies that the coordinates of the element equals to the coordinates of another element.
            </summary>
        </member>
        <member name="F:Support.Sets.CubicComparisonResults.XEquals">
            <summary>
            Specifies that the X coordinate of the element equals to the X coordinate of another element.
            </summary>
        </member>
        <member name="F:Support.Sets.CubicComparisonResults.XGreater">
            <summary>
            Specifies that the X coordinate of the element is greater than the X coordinate of another element.
            </summary>
        </member>
        <member name="F:Support.Sets.CubicComparisonResults.YEquals">
            <summary>
            Specifies that the Y coordinate of the element equals to the Y coordinate of another element.
            </summary>
        </member>
        <member name="F:Support.Sets.CubicComparisonResults.YGreater">
            <summary>
            Specifies that the Y coordinate of the element is greater than the Y coordinate of another element.
            </summary>
        </member>
        <member name="F:Support.Sets.CubicComparisonResults.ZEquals">
            <summary>
            Specifies that the Z coordinate of the element equals to the Z coordinate of another element.
            </summary>
        </member>
        <member name="F:Support.Sets.CubicComparisonResults.ZGreater">
            <summary>
            Specifies that the Z coordinate of the element is greater than the Z coordinate of another element.
            </summary>
        </member>
        <member name="T:Support.Sets.ElementHandler`1">
            <summary>
            References a method that handles an element of a sequence.
            </summary>
            <typeparam name="T">The type of elements of the sequence.</typeparam>
            <param name="element">An element of the sequence.</param>
            <returns><see langword="true"/> whether the enumerating of the elements of the sequence is to be broken; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Support.Sets.ICubicSetElement`1">
            <summary>
            Represents an element of a cubic set.
            </summary>
            <typeparam name="T">The type of elements of the set.</typeparam>
        </member>
        <member name="M:Support.Sets.ICubicSetElement`1.Compare(`0)">
            <summary>
            Compares the <see cref="T:Support.Sets.ICubicSetElement`1"/> with another <see cref="T:Support.Sets.ICubicSetElement`1"/>.
            </summary>
            <param name="element">Another <see cref="T:Support.Sets.ICubicSetElement`1"/> to compare with the <see cref="T:Support.Sets.ICubicSetElement`1"/>.</param>
            <returns>A <see cref="T:Support.Sets.CubicComparisonResults"/> of these elements comparison.</returns>
        </member>
        <member name="T:Support.Sets.IEnumerator`1">
            <summary>
            Represents an enumerator of elements.
            </summary>
            <typeparam name="T">The type of elements of the enumerator.</typeparam>
        </member>
        <member name="P:Support.Sets.IEnumerator`1.Current">
            <summary>
            Gets the current element of the <see cref="T:Support.Sets.IEnumerator`1"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.IEnumerator`1"/> is not started.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.IEnumerator`1"/> is over.</exception>
        </member>
        <member name="M:Support.Sets.IEnumerator`1.MoveNext">
            <summary>
            Sets the next element of the enumeration as current.
            </summary>
            <returns><see langword="true"/> whether the next element is set as current; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Support.Sets.ILinearSetElement`1">
            <summary>
            Represents an element of a linear set.
            </summary>
            <typeparam name="T">The type of elements of the set.</typeparam>
        </member>
        <member name="M:Support.Sets.ILinearSetElement`1.Compare(`0)">
            <summary>
            Compares the <see cref="T:Support.Sets.ILinearSetElement`1"/> with another <see cref="T:Support.Sets.ILinearSetElement`1"/>.
            </summary>
            <param name="element">Another <see cref="T:Support.Sets.ILinearSetElement`1"/> to compare with the <see cref="T:Support.Sets.ILinearSetElement`1"/>.</param>
            <returns>A <see cref="T:Support.Sets.LinearComparisonResults"/> of these elements comparison.</returns>
        </member>
        <member name="T:Support.Sets.Integer">
            <summary>
            Represents an element of the set integers.
            </summary>
        </member>
        <member name="M:Support.Sets.Integer.op_Implicit(System.Int32)~Support.Sets.Integer">
            <summary>
            Converts an <see cref="T:System.Int32"/> to an <see cref="T:Support.Sets.Integer"/>.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/>.</param>
        </member>
        <member name="M:Support.Sets.Integer.op_Implicit(Support.Sets.Integer)~System.Int32">
            <summary>
            Converts an <see cref="T:Support.Sets.Integer"/> to an <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The <see cref="T:Support.Sets.Integer"/>.</param>
        </member>
        <member name="M:Support.Sets.Integer.#ctor(System.Int32)">
            <summary>
            Initializes the <see cref="T:Support.Sets.Integer"/>.
            </summary>
            <param name="value">The value of the <see cref="T:Support.Sets.Integer"/>.</param>
        </member>
        <member name="P:Support.Sets.Integer.RelatedElement">
            <summary>
            Gets the <see cref="T:System.Int32"/> the <see cref="T:Support.Sets.Integer"/> is related to.
            </summary>
        </member>
        <member name="M:Support.Sets.Integer.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:Support.Sets.Integer"/> with an <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the <see cref="T:Support.Sets.Integer"/>.</param>
            <returns><see langword="true"/> whether <paramref name="obj"/> is an <see cref="T:Support.Sets.Integer"/> structure and the <see cref="T:Support.Sets.Integer"/> and <paramref name="obj"/> are equal.</returns>
        </member>
        <member name="M:Support.Sets.Integer.GetHashCode">
            <summary>
            Calculates the hash code for the <see cref="T:Support.Sets.Integer"/>.
            </summary>
            <returns>The hash code for the <see cref="T:Support.Sets.Integer"/>.</returns>
        </member>
        <member name="M:Support.Sets.Integer.ToString">
            <summary>
            Makes a <see cref="T:System.String"/> that representats the <see cref="T:Support.Sets.Integer"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that representats the <see cref="T:Support.Sets.Integer"/>.</returns>
        </member>
        <member name="M:Support.Sets.Integer.Compare(Support.Sets.Integer)">
            <summary>
            Compares the <see cref="T:Support.Sets.Integer"/> with another <see cref="T:Support.Sets.Integer"/>.
            </summary>
            <param name="element">Another <see cref="T:Support.Sets.Integer"/> to compare with the <see cref="T:Support.Sets.Integer"/>.</param>
            <returns>A <see cref="T:Support.Sets.LinearComparisonResults"/> of these elements comparison.</returns>
        </member>
        <member name="T:Support.Sets.IQuadraticSetElement`1">
            <summary>
            Represents an element of a quadratic set.
            </summary>
            <typeparam name="T">The type of elements of the set.</typeparam>
        </member>
        <member name="M:Support.Sets.IQuadraticSetElement`1.Compare(`0)">
            <summary>
            Compares the <see cref="T:Support.Sets.IQuadraticSetElement`1"/> with another <see cref="T:Support.Sets.IQuadraticSetElement`1"/>.
            </summary>
            <param name="element">Another <see cref="T:Support.Sets.IQuadraticSetElement`1"/> to compare with the <see cref="T:Support.Sets.IQuadraticSetElement`1"/>.</param>
            <returns>A <see cref="T:Support.Sets.QuadraticComparisonResults"/> of these elements comparison.</returns>
        </member>
        <member name="T:Support.Sets.IRandomAccessSubset`1">
            <summary>
            Represents an <see cref="T:Support.Sets.ISubset`1"/> that pseudo-randomly assigns elements their addresses.
            </summary>
            <typeparam name="T">The type of elements of the set.</typeparam>
        </member>
        <member name="P:Support.Sets.IRandomAccessSubset`1.Item(System.Int32)">
            <summary>
            Gets an element at an address in the <see cref="T:Support.Sets.IRandomAccessSubset`1"/>.
            </summary>
            <param name="address">The address.</param>
            <exception cref="T:System.ArgumentException">The <see cref="T:Support.Sets.IRandomAccessSubset`1"/> does not contain the element.</exception>
        </member>
        <member name="M:Support.Sets.IRandomAccessSubset`1.TryGetAddress(`0,System.Int32@)">
            <summary>
            Determines whether the <see cref="T:Support.Sets.IRandomAccessSubset`1"/> contains an element.
            </summary>
            <param name="element">The element.</param>
            <param name="address">The address of <paramref name="element"/> if the <see cref="T:Support.Sets.IRandomAccessSubset`1"/> contains <paramref name="element"/>; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the <see cref="T:Support.Sets.ISubset`1"/> contains <paramref name="element"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Support.Sets.IRandomAccessSubset`1.GetAddress(`0)">
            <summary>
            Determines whether the <see cref="T:Support.Sets.IRandomAccessSubset`1"/> contains an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The address of the element.</returns>
            <exception cref="T:System.ArgumentException">The <see cref="T:Support.Sets.IRandomAccessSubset`1"/> does not contain <paramref name="element"/>.</exception>
        </member>
        <member name="M:Support.Sets.IRandomAccessSubset`1.ContainsAt(System.Int32)">
            <summary>
            Determines whether the <see cref="T:Support.Sets.IRandomAccessSubset`1"/> contains an element at an address.
            </summary>
            <param name="address">The address.</param>
            <returns><see langword="true"/> whether the <see cref="T:Support.Sets.IRandomAccessSubset`1"/> contains the element; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Support.Sets.IRandomAccessSubset`1.TryGetAt(System.Int32,`0@)">
            <summary>
            Determines whether the <see cref="T:Support.Sets.IRandomAccessSubset`1"/> contains an element at an address.
            </summary>
            <param name="address">The address.</param>
            <param name="element">The element if the <see cref="T:Support.Sets.IRandomAccessSubset`1"/> contains; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the <see cref="T:Support.Sets.IRandomAccessSubset`1"/> contains the element; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Support.Sets.IRandomAccessSubsetEditor`1">
            <summary>
            Represents an editor of an <see cref="T:Support.Sets.IRandomAccessSubset`1"/>.
            </summary>
            <typeparam name="T">The type of elements of the set.</typeparam>
        </member>
        <member name="M:Support.Sets.IRandomAccessSubsetEditor`1.TryAdd(`0,System.Int32@)">
            <summary>
            Adds an element to the <see cref="T:Support.Sets.IRandomAccessSubset`1"/> if the <see cref="T:Support.Sets.IRandomAccessSubset`1"/> does not contain the element.
            </summary>
            <param name="element">The element.</param>
            <param name="address">The address of the element in the <see cref="T:Support.Sets.IRandomAccessSubset`1"/>.</param>
            <returns><see langword="true"/> whether <paramref name="element"/> is added to the <see cref="T:Support.Sets.IRandomAccessSubset`1"/>; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.IRandomAccessSubset`1"/> would be overflowed.</exception>
        </member>
        <member name="M:Support.Sets.IRandomAccessSubsetEditor`1.Add(`0)">
            <summary>
            Adds an element to the <see cref="T:Support.Sets.IRandomAccessSubset`1"/>.
            </summary>
            <param name="element">The element.</param>
            <returns>The address of the element in the <see cref="T:Support.Sets.IRandomAccessSubset`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.IRandomAccessSubset`1"/> would be overflowed.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="T:Support.Sets.IRandomAccessSubset`1"/> already contains the element.</exception>
        </member>
        <member name="M:Support.Sets.IRandomAccessSubsetEditor`1.TryRemove(`0)">
            <summary>
            Removes an element from the <see cref="T:Support.Sets.IRandomAccessSubset`1"/> if the <see cref="T:Support.Sets.IRandomAccessSubset`1"/> contains the element.
            </summary>
            <param name="element">The element.</param>
            <returns><see langword="true"/> whether <paramref name="element"/> is removed from the <see cref="T:Support.Sets.IRandomAccessSubset`1"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Support.Sets.IRandomAccessSubsetEditor`1.Remove(`0)">
            <summary>
            Removes an element from the <see cref="T:Support.Sets.IRandomAccessSubset`1"/>.
            </summary>
            <param name="element">The element.</param>
            <exception cref="T:System.ArgumentException">The <see cref="T:Support.Sets.IRandomAccessSubset`1"/> does not contain <paramref name="element"/>.</exception>
        </member>
        <member name="M:Support.Sets.IRandomAccessSubsetEditor`1.TryRemoveAt(System.Int32,`0@)">
            <summary>
            Removes an element at an address from the <see cref="T:Support.Sets.IRandomAccessSubset`1"/> if the <see cref="T:Support.Sets.IRandomAccessSubset`1"/> contains the element.
            </summary>
            <param name="address">The address.</param>
            <param name="element">The element if the <see cref="T:Support.Sets.IRandomAccessSubset`1"/> contains; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the element is removed from the <see cref="T:Support.Sets.IRandomAccessSubset`1"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Support.Sets.IRandomAccessSubsetEditor`1.TryRemoveAt(System.Int32)">
            <summary>
            Removes an element at an address from the <see cref="T:Support.Sets.IRandomAccessSubset`1"/> if the <see cref="T:Support.Sets.IRandomAccessSubset`1"/> contains the element.
            </summary>
            <param name="address">The address.</param>
            <returns><see langword="true"/> whether the element is removed from the <see cref="T:Support.Sets.IRandomAccessSubset`1"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Support.Sets.IRandomAccessSubsetEditor`1.RemoveAt(System.Int32)">
            <summary>
            Removes an element at an address from the <see cref="T:Support.Sets.IRandomAccessSubset`1"/>.
            </summary>
            <param name="address">The address.</param>
            <returns>The element.</returns>
            <exception cref="T:System.ArgumentException">The <see cref="T:Support.Sets.IRandomAccessSubset`1"/> does not contain the element.</exception>
        </member>
        <member name="T:Support.Sets.IRing`1">
            <summary>
            Represents an <see cref="T:Support.Sets.ISurjection`2"/> that represents a ring of elements of output set each of those has the own non-negative integer offset (element of input set) from the beginning of the ring.
            </summary>
            <typeparam name="T">The type of elements of the output set.</typeparam>
        </member>
        <member name="P:Support.Sets.IRing`1.First">
            <summary>
            Gets the first element of the <see cref="T:Support.Sets.IRing`1"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.IRing`1"/> is empty.</exception>
        </member>
        <member name="P:Support.Sets.IRing`1.Last">
            <summary>
            Gets the last element of the <see cref="T:Support.Sets.IRing`1"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.IRing`1"/> is empty.</exception>
        </member>
        <member name="M:Support.Sets.IRing`1.TryGetFirst(`0@)">
            <summary>
            Gets the first element of the <see cref="T:Support.Sets.IRing`1"/> if the <see cref="T:Support.Sets.IRing`1"/> is not empty.
            </summary>
            <param name="element">The element if the <see cref="T:Support.Sets.IRing`1"/> is not empty; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the element is gotten; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Support.Sets.IRing`1.TryGetLast(`0@)">
            <summary>
            Gets the last element of the <see cref="T:Support.Sets.IRing`1"/> if the <see cref="T:Support.Sets.IRing`1"/> is not empty.
            </summary>
            <param name="element">The element if the <see cref="T:Support.Sets.IRing`1"/> is not empty; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the element is gotten; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Support.Sets.IRingEditor`1">
            <summary>
            Represents an editor of an <see cref="T:Support.Sets.IRing`1"/>.
            </summary>
            <typeparam name="T">The type of elements of the output set.</typeparam>
        </member>
        <member name="M:Support.Sets.IRingEditor`1.Insert(Support.Sets.Integer,`0)">
            <summary>
            Inserts an element at an offset.
            </summary>
            <param name="offset">The offset.</param>
            <param name="element">The element.</param>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.IRing`1"/> would be overflowed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is less than 0 or greater than the number of elements of the <see cref="T:Support.Sets.IRing`1"/>.</exception>
        </member>
        <member name="M:Support.Sets.IRingEditor`1.InsertDirectly(Support.Sets.Integer,Support.Sets.ISequence{`0})">
            <summary>
            Inserts the elements of an <see cref="T:Support.Sets.ISequence`1"/> so that each subsequent element has an offset that is greater than the previous element's one.
            </summary>
            <param name="offset">The offset of the first element of the <see cref="T:Support.Sets.ISequence`1"/>.</param>
            <param name="sequence">The <see cref="T:Support.Sets.ISequence`1"/>.</param>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.IRing`1"/> would be overflowed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is less than 0 or greater than the number of elements of the <see cref="T:Support.Sets.IRing`1"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sequence"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sequence"/> does not contain elements as many as it is specified.</exception>
        </member>
        <member name="M:Support.Sets.IRingEditor`1.InsertInversely(Support.Sets.Integer,Support.Sets.ISequence{`0})">
            <summary>
            Inserts the elements of an <see cref="T:Support.Sets.ISequence`1"/> so that each subsequent element has an offset that is less than the previous element's one.
            </summary>
            <param name="offset">The offset of the last element of the <see cref="T:Support.Sets.ISequence`1"/>.</param>
            <param name="sequence">The <see cref="T:Support.Sets.ISequence`1"/>.</param>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.IRing`1"/> would be overflowed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is less than 0 or greater than the number of elements of the <see cref="T:Support.Sets.IRing`1"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sequence"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sequence"/> does not contain elements as many as it is specified.</exception>
        </member>
        <member name="M:Support.Sets.IRingEditor`1.AddFirst(`0)">
            <summary>
            Adds an element to the beginning of the <see cref="T:Support.Sets.IRing`1"/>.
            </summary>
            <param name="element">The element.</param>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.IRing`1"/> would be overflowed.</exception>
        </member>
        <member name="M:Support.Sets.IRingEditor`1.AddLast(`0)">
            <summary>
            Adds an element to the end of the <see cref="T:Support.Sets.IRing`1"/>.
            </summary>
            <param name="element">The element.</param>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.IRing`1"/> would be overflowed.</exception>
        </member>
        <member name="M:Support.Sets.IRingEditor`1.AddFirstDirectly(Support.Sets.ISequence{`0})">
            <summary>
            Adds the elements of an <see cref="T:Support.Sets.ISequence`1"/> to the beginning of the <see cref="T:Support.Sets.IRing`1"/> so that each subsequent element has an offset that is less than the previous element's one.
            </summary>
            <param name="sequence">The <see cref="T:Support.Sets.ISequence`1"/>.</param>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.IRing`1"/> would be overflowed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sequence"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sequence"/> does not contain elements as many as it is specified.</exception>
        </member>
        <member name="M:Support.Sets.IRingEditor`1.AddFirstInversely(Support.Sets.ISequence{`0})">
            <summary>
            Adds the elements of an <see cref="T:Support.Sets.ISequence`1"/> to the beginning of the <see cref="T:Support.Sets.IRing`1"/> so that each subsequent element has an offset that is greater than the previous element's one.
            </summary>
            <param name="sequence">The <see cref="T:Support.Sets.ISequence`1"/>.</param>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.IRing`1"/> would be overflowed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sequence"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sequence"/> does not contain elements as many as it is specified.</exception>
        </member>
        <member name="M:Support.Sets.IRingEditor`1.AddLastDirectly(Support.Sets.ISequence{`0})">
            <summary>
            Adds the elements of an <see cref="T:Support.Sets.ISequence`1"/> to the end of the <see cref="T:Support.Sets.IRing`1"/> so that each subsequent element has an offset that is greater than the previous element's one.
            </summary>
            <param name="sequence">The <see cref="T:Support.Sets.ISequence`1"/>.</param>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.IRing`1"/> would be overflowed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sequence"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sequence"/> does not contain elements as many as it is specified.</exception>
        </member>
        <member name="M:Support.Sets.IRingEditor`1.AddLastInversely(Support.Sets.ISequence{`0})">
            <summary>
            Adds the elements of an <see cref="T:Support.Sets.ISequence`1"/> to the end of the <see cref="T:Support.Sets.IRing`1"/> so that each subsequent element has an offset that is less than the previous element's one.
            </summary>
            <param name="sequence">The <see cref="T:Support.Sets.ISequence`1"/>.</param>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.IRing`1"/> would be overflowed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sequence"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sequence"/> does not contain elements as many as it is specified.</exception>
        </member>
        <member name="M:Support.Sets.IRingEditor`1.TryRemoveFirst(`0@)">
            <summary>
            Removes the element from the beginning of the <see cref="T:Support.Sets.IRing`1"/> if the <see cref="T:Support.Sets.IRing`1"/> is not empty.
            </summary>
            <param name="element">The element from the beginning of the <see cref="T:Support.Sets.IRing`1"/> whether it is removed; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the element is removed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Support.Sets.IRingEditor`1.TryRemoveLast(`0@)">
            <summary>
            Removes the element from the end of the <see cref="T:Support.Sets.IRing`1"/> if the <see cref="T:Support.Sets.IRing`1"/> is not empty.
            </summary>
            <param name="element">The element from the end of the <see cref="T:Support.Sets.IRing`1"/> whether it is removed; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the element is removed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Support.Sets.IRingEditor`1.RemoveFirst">
            <summary>
            Removes the element from the beginning of the <see cref="T:Support.Sets.IRing`1"/>.
            </summary>
            <returns>The element from the beginning of the <see cref="T:Support.Sets.IRing`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.IRing`1"/> is empty.</exception>
        </member>
        <member name="M:Support.Sets.IRingEditor`1.RemoveLast">
            <summary>
            Removes the element from the end of the <see cref="T:Support.Sets.IRing`1"/>.
            </summary>
            <returns>The element from the end of the <see cref="T:Support.Sets.IRing`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.IRing`1"/> is empty.</exception>
        </member>
        <member name="T:Support.Sets.ISequence`1">
            <summary>
            Represents a sequence of elements.
            </summary>
            <typeparam name="T">The type of elements of the sequence.</typeparam>
        </member>
        <member name="P:Support.Sets.ISequence`1.Count">
            <summary>
            Gets the number of elements of the <see cref="T:Support.Sets.ISequence`1"/>.
            </summary>
        </member>
        <member name="M:Support.Sets.ISequence`1.GetEnumerator">
            <summary>
            Gets an <see cref="T:Support.Sets.IEnumerator`1"/> of the <see cref="T:Support.Sets.ISequence`1"/>.
            </summary>
            <returns>An <see cref="T:Support.Sets.IEnumerator`1"/> of the <see cref="T:Support.Sets.ISequence`1"/>.</returns>
        </member>
        <member name="M:Support.Sets.ISequence`1.Handle(Support.Sets.ElementHandler{`0})">
            <summary>
            Handles elements of the <see cref="T:Support.Sets.ISequence`1"/> with an <see cref="T:Support.Sets.ElementHandler`1"/>.
            </summary>
            <param name="handler">The handler of the elements.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Support.Sets.ISetElement`1">
            <summary>
            Represents an element of a set.
            </summary>
            <typeparam name="T">The type of elements of the set.</typeparam>
        </member>
        <member name="M:Support.Sets.ISetElement`1.Compare(`0)">
            <summary>
            Compares the <see cref="T:Support.Sets.ISetElement`1"/> with another <see cref="T:Support.Sets.ISetElement`1"/>.
            </summary>
            <param name="element">Another <see cref="T:Support.Sets.ISetElement`1"/> to compare with the <see cref="T:Support.Sets.ISetElement`1"/>.</param>
            <returns><see langword="true"/> whether the <see cref="T:Support.Sets.ISetElement`1"/> equals to <paramref name="element"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Support.Sets.ISubset`1">
            <summary>
            Represents a subset of elements of a set.
            </summary>
            <typeparam name="T">The type of elements of the set.</typeparam>
        </member>
        <member name="M:Support.Sets.ISubset`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:Support.Sets.ISubset`1"/> contains an element.
            </summary>
            <param name="element">The element.</param>
            <returns><see langword="true"/> whether the <see cref="T:Support.Sets.ISubset`1"/> contains <paramref name="element"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Support.Sets.ISubsetEditor`1">
            <summary>
            Represents an editor of an <see cref="T:Support.Sets.ISubset`1"/>.
            </summary>
            <typeparam name="T">The type of elements of the set.</typeparam>
        </member>
        <member name="M:Support.Sets.ISubsetEditor`1.Clear">
            <summary>
            Removes all elements from the <see cref="T:Support.Sets.ISubset`1"/>.
            </summary>
        </member>
        <member name="T:Support.Sets.ISurjection`2">
            <summary>
            Represents a surjective correspondence function implemented as a <see cref="T:Support.Sets.ISubset`1"/> of <see cref="T:Support.Sets.Relation`2"/> instances.
            </summary>
            <typeparam name="TInput">The type of elements of the input set.</typeparam>
            <typeparam name="TOutput">The type of elements of the output set.</typeparam>
        </member>
        <member name="P:Support.Sets.ISurjection`2.Item(`0)">
            <summary>
            Gets the output element that corresponds an input element.
            </summary>
            <param name="input">The input element.</param>
            <exception cref="T:System.ArgumentException">The <see cref="T:Support.Sets.ISurjection`2"/> does not contain a <see cref="T:Support.Sets.Relation`2"/> with <paramref name="input"/>.</exception>
        </member>
        <member name="M:Support.Sets.ISurjection`2.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:Support.Sets.ISurjection`2"/> contains a relation with an input element.
            </summary>
            <param name="input">The input element.</param>
            <returns><see langword="true"/> whether the <see cref="T:Support.Sets.ISurjection`2"/> contains a <see cref="T:Support.Sets.Relation`2"/> with <paramref name="input"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Support.Sets.ISurjection`2.TryGet(`0,`1@)">
            <summary>
            Gets the output element that corresponds an input element if the <see cref="T:Support.Sets.ISurjection`2"/> contains a <see cref="T:Support.Sets.Relation`2"/> with the input element.
            </summary>
            <param name="input">The input element.</param>
            <param name="output">The output element if the <see cref="T:Support.Sets.ISurjection`2"/> contains a <see cref="T:Support.Sets.Relation`2"/> with <paramref name="input"/>; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the <see cref="T:Support.Sets.ISurjection`2"/> contains a <see cref="T:Support.Sets.Relation`2"/> with <paramref name="input"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Support.Sets.ISurjectionEditor`2">
            <summary>
            Represents an editor of an <see cref="T:Support.Sets.ISurjection`2"/>.
            </summary>
            <typeparam name="TInput">The type of elements of the input set.</typeparam>
            <typeparam name="TOutput">The type of elements of the output set.</typeparam>
        </member>
        <member name="P:Support.Sets.ISurjectionEditor`2.Item(`0)">
            <summary>
            Sets the output element that corresponds an input element.
            </summary>
            <param name="input">The input element.</param>
            <exception cref="T:System.ArgumentException">The <see cref="T:Support.Sets.ISurjection`2"/> does not contain a <see cref="T:Support.Sets.Relation`2"/> with <paramref name="input"/>.</exception>
        </member>
        <member name="M:Support.Sets.ISurjectionEditor`2.TrySet(`0,`1,`1@)">
            <summary>
            Sets an output element that corresponds an input element if the <see cref="T:Support.Sets.ISurjection`2"/> contains a <see cref="T:Support.Sets.Relation`2"/> with the input element.
            </summary>
            <param name="input">The input element.</param>
            <param name="newOutput">The new output element.</param>
            <param name="oldOutput">The old output element if the <see cref="T:Support.Sets.ISurjection`2"/> contains a <see cref="T:Support.Sets.Relation`2"/> with <paramref name="input"/>; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the <see cref="T:Support.Sets.ISurjection`2"/> contains a <see cref="T:Support.Sets.Relation`2"/> with <paramref name="input"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Support.Sets.ISurjectionEditor`2.TrySet(`0,`1)">
            <summary>
            Sets an output element that corresponds an input element if the <see cref="T:Support.Sets.ISurjection`2"/> contains a <see cref="T:Support.Sets.Relation`2"/> with the input element.
            </summary>
            <param name="input">The input element.</param>
            <param name="newOutput">The new output element.</param>
            <returns><see langword="true"/> whether the <see cref="T:Support.Sets.ISurjection`2"/> contains a <see cref="T:Support.Sets.Relation`2"/> with <paramref name="input"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Support.Sets.ISurjectionEditor`2.Set(`0,`1,`1@)">
            <summary>
            Sets an output element that corresponds an input element.
            </summary>
            <param name="input">The input element.</param>
            <param name="newOutput">The new output element.</param>
            <param name="oldOutput">The old output element.</param>
            <exception cref="T:System.ArgumentException">The <see cref="T:Support.Sets.ISurjection`2"/> does not contain a <see cref="T:Support.Sets.Relation`2"/> with <paramref name="input"/>.</exception>
        </member>
        <member name="T:Support.Sets.ISurjectiveSetElement`1">
            <summary>
            Represents an element of a set that is related to another element of another set.
            </summary>
            <typeparam name="T">The type of elements of another set.</typeparam>
        </member>
        <member name="P:Support.Sets.ISurjectiveSetElement`1.RelatedElement">
            <summary>
            Gets the element the <see cref="T:Support.Sets.ISurjectiveSetElement`1"/> is related to.
            </summary>
        </member>
        <member name="T:Support.Sets.LinearComparisonResults">
            <summary>
            Specifies the results of linear set elements comparison.
            </summary>
        </member>
        <member name="F:Support.Sets.LinearComparisonResults.Default">
            <summary>
            Specifies that the coordinate of the element is less than the coordinate of another element.
            </summary>
        </member>
        <member name="F:Support.Sets.LinearComparisonResults.Equals">
            <summary>
            Specifies that the coordinate of the element equals to the coordinate of another element.
            </summary>
        </member>
        <member name="F:Support.Sets.LinearComparisonResults.Greater">
            <summary>
            Specifies that the coordinate of the element is greater than the coordinate of another element.
            </summary>
        </member>
        <member name="T:Support.Sets.QuadraticComparisonResults">
            <summary>
            Specifies the results of quadratic set elements comparison.
            </summary>
        </member>
        <member name="F:Support.Sets.QuadraticComparisonResults.Default">
            <summary>
            Specifies that the all coordinates of the element is less than the all coordinates of another element respectively.
            </summary>
        </member>
        <member name="F:Support.Sets.QuadraticComparisonResults.Equals">
            <summary>
            Specifies that the coordinates of the element equals to the coordinates of another element.
            </summary>
        </member>
        <member name="F:Support.Sets.QuadraticComparisonResults.XEquals">
            <summary>
            Specifies that the X coordinate of the element equals to the X coordinate of another element.
            </summary>
        </member>
        <member name="F:Support.Sets.QuadraticComparisonResults.XGreater">
            <summary>
            Specifies that the X coordinate of the element is greater than the X coordinate of another element.
            </summary>
        </member>
        <member name="F:Support.Sets.QuadraticComparisonResults.YEquals">
            <summary>
            Specifies that the Y coordinate of the element equals to the Y coordinate of another element.
            </summary>
        </member>
        <member name="F:Support.Sets.QuadraticComparisonResults.YGreater">
            <summary>
            Specifies that the Y coordinate of the element is greater than the Y coordinate of another element.
            </summary>
        </member>
        <member name="T:Support.Sets.RandomAccessSubset`1">
            <summary>
            Represents an <see cref="T:Support.Sets.IRandomAccessSubset`1"/> realized in the memory.
            </summary>
            <typeparam name="T">The type of elements of the set.</typeparam>
        </member>
        <member name="T:Support.Sets.RandomAccessSubset`1.Enumerator">
            <summary>
            Represents an enumerator of elements of a <see cref="T:Support.Sets.RandomAccessSubset`1"/>.
            </summary>
        </member>
        <member name="P:Support.Sets.RandomAccessSubset`1.Enumerator.Current">
            <summary>
            Gets the current element of the <see cref="T:Support.Sets.RandomAccessSubset`1.Enumerator"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.RandomAccessSubset`1.Enumerator"/> is not started.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.RandomAccessSubset`1.Enumerator"/> is over.</exception>
        </member>
        <member name="M:Support.Sets.RandomAccessSubset`1.Enumerator.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Support.Sets.RandomAccessSubset`1.Enumerator"/>.
            </summary>
        </member>
        <member name="M:Support.Sets.RandomAccessSubset`1.Enumerator.MoveNext">
            <summary>
            Sets the next element of the <see cref="T:Support.Sets.RandomAccessSubset`1"/> as current.
            </summary>
            <returns><see langword="true"/> whether the next element is set as current; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Support.Sets.RandomAccessSubset`1.Editor">
            <summary>
            Represents an editor of a <see cref="T:Support.Sets.RandomAccessSubset`1"/>.
            </summary>
        </member>
        <member name="M:Support.Sets.RandomAccessSubset`1.Editor.Clear">
            <summary>
            Removes all elements from the <see cref="T:Support.Sets.RandomAccessSubset`1"/>.
            </summary>
        </member>
        <member name="M:Support.Sets.RandomAccessSubset`1.Editor.TryAdd(`0,System.Int32@)">
            <summary>
            Adds an element to the <see cref="T:Support.Sets.RandomAccessSubset`1"/> if the <see cref="T:Support.Sets.RandomAccessSubset`1"/> does not contain the element.
            </summary>
            <param name="element">The element.</param>
            <param name="address">The address of the element in the <see cref="T:Support.Sets.RandomAccessSubset`1"/>.</param>
            <returns><see langword="true"/> whether <paramref name="element"/> is added to the <see cref="T:Support.Sets.RandomAccessSubset`1"/>; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.RandomAccessSubset`1"/> would be overflowed.</exception>
        </member>
        <member name="M:Support.Sets.RandomAccessSubset`1.Editor.Add(`0)">
            <summary>
            Adds an element to the <see cref="T:Support.Sets.RandomAccessSubset`1"/>.
            </summary>
            <param name="element">The element.</param>
            <returns>The address of the element in the <see cref="T:Support.Sets.RandomAccessSubset`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.RandomAccessSubset`1"/> would be overflowed.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="T:Support.Sets.RandomAccessSubset`1"/> already contains the element.</exception>
        </member>
        <member name="M:Support.Sets.RandomAccessSubset`1.Editor.TryRemove(`0)">
            <summary>
            Removes an element from the <see cref="T:Support.Sets.RandomAccessSubset`1"/> if the <see cref="T:Support.Sets.RandomAccessSubset`1"/> contains the element.
            </summary>
            <param name="element">The element.</param>
            <returns><see langword="true"/> whether <paramref name="element"/> is removed from the <see cref="T:Support.Sets.RandomAccessSubset`1"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Support.Sets.RandomAccessSubset`1.Editor.Remove(`0)">
            <summary>
            Removes an element from the <see cref="T:Support.Sets.RandomAccessSubset`1"/>.
            </summary>
            <param name="element">The element.</param>
            <exception cref="T:System.ArgumentException">The <see cref="T:Support.Sets.RandomAccessSubset`1"/> does not contain <paramref name="element"/>.</exception>
        </member>
        <member name="M:Support.Sets.RandomAccessSubset`1.Editor.TryRemoveAt(System.Int32,`0@)">
            <summary>
            Removes an element at an address from the <see cref="T:Support.Sets.RandomAccessSubset`1"/> if the <see cref="T:Support.Sets.RandomAccessSubset`1"/> contains the element.
            </summary>
            <param name="address">The address.</param>
            <param name="element">The element if the <see cref="T:Support.Sets.RandomAccessSubset`1"/> contains; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the element is removed from the <see cref="T:Support.Sets.RandomAccessSubset`1"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Support.Sets.RandomAccessSubset`1.Editor.TryRemoveAt(System.Int32)">
            <summary>
            Removes an element at an address from the <see cref="T:Support.Sets.RandomAccessSubset`1"/> if the <see cref="T:Support.Sets.RandomAccessSubset`1"/> contains the element.
            </summary>
            <param name="address">The address.</param>
            <returns><see langword="true"/> whether the element is removed from the <see cref="T:Support.Sets.RandomAccessSubset`1"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Support.Sets.RandomAccessSubset`1.Editor.RemoveAt(System.Int32)">
            <summary>
            Removes an element at an address from the <see cref="T:Support.Sets.RandomAccessSubset`1"/>.
            </summary>
            <param name="address">The address.</param>
            <returns>The element.</returns>
            <exception cref="T:System.ArgumentException">The <see cref="T:Support.Sets.RandomAccessSubset`1"/> does not contain the element.</exception>
        </member>
        <member name="M:Support.Sets.RandomAccessSubset`1.#ctor(System.Int32)">
            <summary>
            Initializes the <see cref="T:Support.Sets.RandomAccessSubset`1"/>.
            </summary>
            <param name="capacity">The minimum number of elements of the <see cref="T:Support.Sets.RandomAccessSubset`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:Support.Sets.RandomAccessSubset`1.#ctor">
            <summary>
            Initializes the <see cref="T:Support.Sets.RandomAccessSubset`1"/>.
            </summary>
        </member>
        <member name="P:Support.Sets.RandomAccessSubset`1.Count">
            <summary>
            Gets the number of elements of the <see cref="T:Support.Sets.RandomAccessSubset`1"/>.
            </summary>
        </member>
        <member name="P:Support.Sets.RandomAccessSubset`1.Item(System.Int32)">
            <summary>
            Gets an element at an address in the <see cref="T:Support.Sets.RandomAccessSubset`1"/>.
            </summary>
            <param name="address">The address.</param>
            <exception cref="T:System.ArgumentException">The <see cref="T:Support.Sets.RandomAccessSubset`1"/> does not contain the element.</exception>
        </member>
        <member name="M:Support.Sets.RandomAccessSubset`1.GetEnumerator">
            <summary>
            Gets an <see cref="T:Support.Sets.RandomAccessSubset`1.Enumerator"/> of the <see cref="T:Support.Sets.RandomAccessSubset`1"/>.
            </summary>
            <returns>An <see cref="T:Support.Sets.RandomAccessSubset`1.Enumerator"/> of the <see cref="T:Support.Sets.RandomAccessSubset`1"/>.</returns>
        </member>
        <member name="M:Support.Sets.RandomAccessSubset`1.Handle(Support.Sets.ElementHandler{`0})">
            <summary>
            Handles elements of the <see cref="T:Support.Sets.RandomAccessSubset`1"/> with an <see cref="T:Support.Sets.ElementHandler`1"/>.
            </summary>
            <param name="handler">The handler of the elements.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Support.Sets.RandomAccessSubset`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:Support.Sets.RandomAccessSubset`1"/> contains an element.
            </summary>
            <param name="element">The element.</param>
            <returns><see langword="true"/> whether the <see cref="T:Support.Sets.RandomAccessSubset`1"/> contains <paramref name="element"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Support.Sets.RandomAccessSubset`1.TryGetAddress(`0,System.Int32@)">
            <summary>
            Determines whether the <see cref="T:Support.Sets.RandomAccessSubset`1"/> contains an element.
            </summary>
            <param name="element">The element.</param>
            <param name="address">The address of <paramref name="element"/> if the <see cref="T:Support.Sets.RandomAccessSubset`1"/> contains <paramref name="element"/>; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the <see cref="T:Support.Sets.RandomAccessSubset`1"/> contains <paramref name="element"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Support.Sets.RandomAccessSubset`1.GetAddress(`0)">
            <summary>
            Determines whether the <see cref="T:Support.Sets.RandomAccessSubset`1"/> contains an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The address of the element.</returns>
            <exception cref="T:System.ArgumentException">The <see cref="T:Support.Sets.RandomAccessSubset`1"/> does not contain <paramref name="element"/>.</exception>
        </member>
        <member name="M:Support.Sets.RandomAccessSubset`1.ContainsAt(System.Int32)">
            <summary>
            Determines whether the <see cref="T:Support.Sets.RandomAccessSubset`1"/> contains an element at an address.
            </summary>
            <param name="address">The address.</param>
            <returns><see langword="true"/> whether the <see cref="T:Support.Sets.RandomAccessSubset`1"/> contains the element; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Support.Sets.RandomAccessSubset`1.TryGetAt(System.Int32,`0@)">
            <summary>
            Determines whether the <see cref="T:Support.Sets.RandomAccessSubset`1"/> contains an element at an address.
            </summary>
            <param name="address">The address.</param>
            <param name="element">The element if the <see cref="T:Support.Sets.RandomAccessSubset`1"/> contains; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the <see cref="T:Support.Sets.RandomAccessSubset`1"/> contains the element; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Support.Sets.Relation`2">
            <summary>
            Represents a relation of elements from input and output sets.
            </summary>
            <typeparam name="TInput">The type of elements of the input set.</typeparam>
            <typeparam name="TOutput">The type of elements of the output set.</typeparam>
        </member>
        <member name="F:Support.Sets.Relation`2.Input">
            <summary>
            The element of the input set.
            </summary>
        </member>
        <member name="F:Support.Sets.Relation`2.Output">
            <summary>
            The element of the output set.
            </summary>
        </member>
        <member name="M:Support.Sets.Relation`2.#ctor(`0,`1)">
            <summary>
            Initializes the <see cref="T:Support.Sets.Relation`2"/>.
            </summary>
            <param name="input">The element of the input set.</param>
            <param name="output">The element of the output set.</param>
        </member>
        <member name="M:Support.Sets.Relation`2.Compare(Support.Sets.Relation{`0,`1})">
            <summary>
            Compares the <see cref="T:Support.Sets.Relation`2"/> with another <see cref="T:Support.Sets.Relation`2"/>.
            </summary>
            <param name="element">Another <see cref="T:Support.Sets.Relation`2"/> to compare with the <see cref="T:Support.Sets.Relation`2"/>.</param>
            <returns><see langword="true"/> whether the <see cref="T:Support.Sets.Relation`2"/> equals to <paramref name="element"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Support.Sets.Ring`1">
            <summary>
            Represents an <see cref="T:Support.Sets.IRing`1"/> realized in the memory.
            </summary>
            <typeparam name="T">The type of elements of the output set.</typeparam>
        </member>
        <member name="T:Support.Sets.Ring`1.Enumerator">
            <summary>
            Represents an enumerator of elements of a <see cref="T:Support.Sets.Ring`1"/>.
            </summary>
        </member>
        <member name="P:Support.Sets.Ring`1.Enumerator.Current">
            <summary>
            Gets the current element of the <see cref="T:Support.Sets.Ring`1.Enumerator"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.Ring`1.Enumerator"/> is not started.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.Ring`1.Enumerator"/> is over.</exception>
        </member>
        <member name="M:Support.Sets.Ring`1.Enumerator.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Support.Sets.Ring`1.Enumerator"/>.
            </summary>
        </member>
        <member name="M:Support.Sets.Ring`1.Enumerator.MoveNext">
            <summary>
            Sets the next element of the <see cref="T:Support.Sets.Ring`1"/> as current.
            </summary>
            <returns><see langword="true"/> whether the next element is set as current; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Support.Sets.Ring`1.Editor">
            <summary>
            Represents an editor of a <see cref="T:Support.Sets.Ring`1"/>.
            </summary>
        </member>
        <member name="P:Support.Sets.Ring`1.Editor.Item(Support.Sets.Integer)">
            <summary>
            Sets the element that corresponds an index.
            </summary>
            <param name="index">The index.</param>
            <exception cref="T:System.ArgumentException">The <see cref="T:Support.Sets.Ring`1"/> does not contain a relation with <paramref name="index"/>.</exception>
        </member>
        <member name="M:Support.Sets.Ring`1.Editor.Clear">
            <summary>
            Removes all elements from the <see cref="T:Support.Sets.Ring`1"/>.
            </summary>
        </member>
        <member name="M:Support.Sets.Ring`1.Editor.TrySet(Support.Sets.Integer,`0,`0@)">
            <summary>
            Sets an element that corresponds an index if the <see cref="T:Support.Sets.Ring`1"/> contains a relation with the index.
            </summary>
            <param name="index">The index.</param>
            <param name="newElement">The new element.</param>
            <param name="oldElement">The old element if the <see cref="T:Support.Sets.Ring`1"/> contains a relation with <paramref name="index"/>; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the <see cref="T:Support.Sets.Ring`1"/> contains a relation with <paramref name="index"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Support.Sets.Ring`1.Editor.TrySet(Support.Sets.Integer,`0)">
            <summary>
            Sets an element that corresponds an index if the <see cref="T:Support.Sets.Ring`1"/> contains a relation with the index.
            </summary>
            <param name="index">The index.</param>
            <param name="newElement">The new element.</param>
            <returns><see langword="true"/> whether the <see cref="T:Support.Sets.Ring`1"/> contains a relation with <paramref name="index"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Support.Sets.Ring`1.Editor.Set(Support.Sets.Integer,`0,`0@)">
            <summary>
            Sets an element that corresponds an index.
            </summary>
            <param name="index">The index.</param>
            <param name="newElement">The new element.</param>
            <param name="oldElement">The old element.</param>
            <exception cref="T:System.ArgumentException">The <see cref="T:Support.Sets.Ring`1"/> does not contain a relation with <paramref name="index"/>.</exception>
        </member>
        <member name="M:Support.Sets.Ring`1.Editor.Insert(Support.Sets.Integer,`0)">
            <summary>
            Inserts an element at an index.
            </summary>
            <param name="index">The index of the element.</param>
            <param name="element">The new element at <paramref name="index"/>.</param>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.Ring`1"/> would be overflowed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the range of valid indices of the <see cref="T:Support.Sets.Ring`1"/>.</exception>
        </member>
        <member name="M:Support.Sets.Ring`1.Editor.InsertDirectly(Support.Sets.Integer,Support.Sets.ISequence{`0})">
            <summary>
            Inserts the elements of an <see cref="T:Support.Sets.ISequence`1"/> in direct order at an index.
            </summary>
            <param name="index">The index of the first element of the sequence to insert.</param>
            <param name="sequence">The sequence.</param>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.Ring`1"/> would be overflowed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the range of valid indices of the <see cref="T:Support.Sets.Ring`1"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sequence"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sequence"/> does not contain elements as many as it is specified.</exception>
        </member>
        <member name="M:Support.Sets.Ring`1.Editor.InsertInversely(Support.Sets.Integer,Support.Sets.ISequence{`0})">
            <summary>
            Inserts the elements of an <see cref="T:Support.Sets.ISequence`1"/> in reverse order at an index.
            </summary>
            <param name="index">The index of the first element of the sequence to insert.</param>
            <param name="sequence">The sequence.</param>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.Ring`1"/> would be overflowed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the range of valid indices of the <see cref="T:Support.Sets.Ring`1"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sequence"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sequence"/> does not contain elements as many as it is specified.</exception>
        </member>
        <member name="M:Support.Sets.Ring`1.Editor.AddFirst(`0)">
            <summary>
            Adds an element to the start of the <see cref="T:Support.Sets.Ring`1"/>.
            </summary>
            <param name="element">The element to add to the <see cref="T:Support.Sets.Ring`1"/>.</param>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.Ring`1"/> would be overflowed.</exception>
        </member>
        <member name="M:Support.Sets.Ring`1.Editor.AddLast(`0)">
            <summary>
            Adds an element to the endIndex of the <see cref="T:Support.Sets.Ring`1"/>.
            </summary>
            <param name="element">The element to add to the <see cref="T:Support.Sets.Ring`1"/>.</param>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.Ring`1"/> would be overflowed.</exception>
        </member>
        <member name="M:Support.Sets.Ring`1.Editor.AddFirstDirectly(Support.Sets.ISequence{`0})">
            <summary>
            Adds the element of an <see cref="T:Support.Sets.ISequence`1"/> to the start of the <see cref="T:Support.Sets.Ring`1"/>.
            </summary>
            <param name="sequence">The sequence.</param>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.Ring`1"/> would be overflowed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sequence"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sequence"/> contains more elements than it is specified.</exception>
        </member>
        <member name="M:Support.Sets.Ring`1.Editor.AddFirstInversely(Support.Sets.ISequence{`0})">
            <summary>
            Adds the element of an <see cref="T:Support.Sets.ISequence`1"/> to the start of the <see cref="T:Support.Sets.Ring`1"/>.
            </summary>
            <param name="sequence">The sequence.</param>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.Ring`1"/> would be overflowed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sequence"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sequence"/> contains more elements than it is specified.</exception>
        </member>
        <member name="M:Support.Sets.Ring`1.Editor.AddLastDirectly(Support.Sets.ISequence{`0})">
            <summary>
            Adds the element of an <see cref="T:Support.Sets.ISequence`1"/> to the endIndex of the <see cref="T:Support.Sets.Ring`1"/>.
            </summary>
            <param name="sequence">The sequence.</param>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.Ring`1"/> would be overflowed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sequence"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sequence"/> contains more elements than it is specified.</exception>
        </member>
        <member name="M:Support.Sets.Ring`1.Editor.AddLastInversely(Support.Sets.ISequence{`0})">
            <summary>
            Adds the element of an <see cref="T:Support.Sets.ISequence`1"/> to the endIndex of the <see cref="T:Support.Sets.Ring`1"/>.
            </summary>
            <param name="sequence">The sequence.</param>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.Ring`1"/> would be overflowed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sequence"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sequence"/> contains more elements than it is specified.</exception>
        </member>
        <member name="M:Support.Sets.Ring`1.Editor.TryRemoveFirst(`0@)">
            <summary>
            Removes the element from the endIndex of the <see cref="T:Support.Sets.Ring`1"/> if the <see cref="T:Support.Sets.Ring`1"/> is not empty.
            </summary>
            <param name="element">The element from the endIndex of the <see cref="T:Support.Sets.Ring`1"/> whether is removed; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the element is removed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Support.Sets.Ring`1.Editor.TryRemoveLast(`0@)">
            <summary>
            Removes the element from the start of the <see cref="T:Support.Sets.Ring`1"/> if the <see cref="T:Support.Sets.Ring`1"/> is not empty.
            </summary>
            <param name="element">The element from the start of the <see cref="T:Support.Sets.Ring`1"/> whether is removed; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the element is removed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Support.Sets.Ring`1.Editor.RemoveFirst">
            <summary>
            Removes the element from the start of the <see cref="T:Support.Sets.Ring`1"/>.
            </summary>
            <returns>The element from the start of the <see cref="T:Support.Sets.Ring`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.Ring`1"/> is empty.</exception>
        </member>
        <member name="M:Support.Sets.Ring`1.Editor.RemoveLast">
            <summary>
            Removes the element from the endIndex of the <see cref="T:Support.Sets.Ring`1"/>.
            </summary>
            <returns>The element from the endIndex of the <see cref="T:Support.Sets.Ring`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.Ring`1"/> is empty.</exception>
        </member>
        <member name="M:Support.Sets.Ring`1.#ctor(System.Int32)">
            <summary>
            Initializes the <see cref="T:Support.Sets.Ring`1"/>.
            </summary>
            <param name="capacity">The minimum number of indices that is to be related to elements of the set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:Support.Sets.Ring`1.#ctor">
            <summary>
            Initializes the <see cref="T:Support.Sets.Ring`1"/>.
            </summary>
        </member>
        <member name="P:Support.Sets.Ring`1.Count">
            <summary>
            Gets the number of elements of the <see cref="T:Support.Sets.Ring`1"/>.
            </summary>
        </member>
        <member name="P:Support.Sets.Ring`1.Item(Support.Sets.Integer)">
            <summary>
            Gets or sets the element that corresponds an index.
            </summary>
            <param name="index">The index.</param>
            <exception cref="T:System.ArgumentException">The <see cref="T:Support.Sets.Ring`1"/> does not contain a relation with <paramref name="index"/>.</exception>
        </member>
        <member name="P:Support.Sets.Ring`1.First">
            <summary>
            Gets the first element of the <see cref="T:Support.Sets.Ring`1"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.IRing`1"/> is empty.</exception>
        </member>
        <member name="P:Support.Sets.Ring`1.Last">
            <summary>
            Gets the last element of the <see cref="T:Support.Sets.Ring`1"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.IRing`1"/> is empty.</exception>
        </member>
        <member name="M:Support.Sets.Ring`1.GetEnumerator">
            <summary>
            Gets an <see cref="T:Support.Sets.Ring`1.Enumerator"/> of the <see cref="T:Support.Sets.Ring`1"/>.
            </summary>
            <returns>An <see cref="T:Support.Sets.Ring`1.Enumerator"/> of the <see cref="T:Support.Sets.Ring`1"/>.</returns>
        </member>
        <member name="M:Support.Sets.Ring`1.Handle(Support.Sets.ElementHandler{Support.Sets.Relation{Support.Sets.Integer,`0}})">
            <summary>
            Handles elements of the <see cref="T:Support.Sets.Ring`1"/> with an <see cref="T:Support.Sets.ElementHandler`1"/>.
            </summary>
            <param name="handler">The handler of the elements.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Support.Sets.Ring`1.Contains(Support.Sets.Integer)">
            <summary>
            Determines whether the <see cref="T:Support.Sets.Ring`1"/> contains a relation with an index.
            </summary>
            <param name="index">The index.</param>
            <returns><see langword="true"/> whether the <see cref="T:Support.Sets.Ring`1"/> contains a relation with <paramref name="index"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Support.Sets.Ring`1.TryGet(Support.Sets.Integer,`0@)">
            <summary>
            Gets the element that corresponds an index if the <see cref="T:Support.Sets.Ring`1"/> contains a relation with the index.
            </summary>
            <param name="index">The index.</param>
            <param name="element">The element if the <see cref="T:Support.Sets.Ring`1"/> contains a relation with <paramref name="index"/>; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the <see cref="T:Support.Sets.Ring`1"/> contains a relation with <paramref name="index"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Support.Sets.Ring`1.TryGetFirst(`0@)">
            <summary>
            Gets the first element of the <see cref="T:Support.Sets.Ring`1"/> if the <see cref="T:Support.Sets.Ring`1"/> is not empty.
            </summary>
            <param name="element">The element if the <see cref="T:Support.Sets.Ring`1"/> is not empty; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the element is gotten; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Support.Sets.Ring`1.TryGetLast(`0@)">
            <summary>
            Gets the last element of the <see cref="T:Support.Sets.Ring`1"/> if the <see cref="T:Support.Sets.Ring`1"/> is not empty.
            </summary>
            <param name="element">The element if the <see cref="T:Support.Sets.Ring`1"/> is not empty; otherwise, the default value.</param>
            <returns><see langword="true"/> whether the element is gotten; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Support.Sets.SequenceHelper">
            <summary>
            Provides methods for sequences manipulation.
            </summary>
        </member>
        <member name="T:Support.Sets.SequenceHelper.ConvertedSequence`2">
            <summary>
            Represents a sequence of converted elements of another sequence.
            </summary>
            <typeparam name="TSource">The type of elements of the source sequence.</typeparam>
            <typeparam name="TResult">The type of elements of the result sequence.</typeparam>
        </member>
        <member name="T:Support.Sets.SequenceHelper.ConvertedSequence`2.Enumerator">
            <summary>
            Represents an enumerator of converted elements.
            </summary>
        </member>
        <member name="P:Support.Sets.SequenceHelper.ConvertedSequence`2.Enumerator.Current">
            <summary>
            Gets the current element of the <see cref="T:Support.Sets.SequenceHelper.ConvertedSequence`2.Enumerator"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.SequenceHelper.ConvertedSequence`2.Enumerator"/> is not started.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Support.Sets.SequenceHelper.ConvertedSequence`2.Enumerator"/> is over.</exception>
        </member>
        <member name="M:Support.Sets.SequenceHelper.ConvertedSequence`2.Enumerator.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Support.Sets.SequenceHelper.ConvertedSequence`2.Enumerator"/>.
            </summary>
        </member>
        <member name="M:Support.Sets.SequenceHelper.ConvertedSequence`2.Enumerator.MoveNext">
            <summary>
            Sets the next element of the sequence as current.
            </summary>
            <returns><see langword="true"/> whether the next element is set as current; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Support.Sets.SequenceHelper.ConvertedSequence`2.Count">
            <summary>
            Gets the number of elements of the <see cref="T:Support.Sets.SequenceHelper.ConvertedSequence`2"/>.
            </summary>
        </member>
        <member name="M:Support.Sets.SequenceHelper.ConvertedSequence`2.GetEnumerator">
            <summary>
            Gets an <see cref="T:Support.Sets.SequenceHelper.ConvertedSequence`2.Enumerator"/> of the <see cref="T:Support.Sets.SequenceHelper.ConvertedSequence`2"/>.
            </summary>
            <returns>An <see cref="T:Support.Sets.SequenceHelper.ConvertedSequence`2.Enumerator"/> of the <see cref="T:Support.Sets.SequenceHelper.ConvertedSequence`2"/>.</returns>
        </member>
        <member name="M:Support.Sets.SequenceHelper.ConvertedSequence`2.Handle(Support.Sets.ElementHandler{`1})">
            <summary>
            Handles elements of the <see cref="T:Support.Sets.SequenceHelper.ConvertedSequence`2"/> with an <see cref="T:Support.Sets.ElementHandler`1"/>.
            </summary>
            <param name="handler">The handler of the elements.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Support.Sets.SequenceHelper.GetConvertedSequence``2(Support.Sets.ISequence{``0},System.Func{``0,``1})">
            <summary>
            Gets a <see cref="T:Support.Sets.SequenceHelper.ConvertedSequence`2"/> of elements of the <see cref="T:Support.Sets.ISequence`1"/>.
            </summary>
            <typeparam name="TSource">The type of elements of the source sequence.</typeparam>
            <typeparam name="TResult">The type of elements of the result sequence.</typeparam>
            <param name="sequence">The source sequence.</param>
            <param name="converter">The converter of the elements of the source sequence.</param>
            <returns>A <see cref="T:Support.Sets.SequenceHelper.ConvertedSequence`2"/> of elements of the <see cref="T:Support.Sets.ISequence`1"/>.</returns>
        </member>
        <member name="T:Support.Threading.ManualSynchronizationContext">
            <summary>
            Represents a custom synchronization context that needs for sometimes <see cref="M:Support.Threading.ManualSynchronizationContext.Execute"/> call.
            </summary>
        </member>
        <member name="M:Support.Threading.ManualSynchronizationContext.#ctor">
            <summary>
            Initializes the <see cref="T:Support.Threading.ManualSynchronizationContext"/>.
            </summary>
        </member>
        <member name="M:Support.Threading.ManualSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Dispatches a synchronous message to a synchronization context.
            </summary>
            <param name="d">The <see cref="T:System.Threading.SendOrPostCallback"/> delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="M:Support.Threading.ManualSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Dispatches an asynchronous message to a synchronization context.
            </summary>
            <param name="d">The <see cref="T:System.Threading.SendOrPostCallback"/> delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="M:Support.Threading.ManualSynchronizationContext.Execute">
            <summary>
            Executes actions which wait execution in the synchronization context.
            </summary>
            <exception cref="T:System.InvalidOperationException">The current thread does not equal to the thread of the synchronization context.</exception>
            <exception cref="T:System.AggregateException">Exceptions were thrown from the executed actions.</exception>
        </member>
        <member name="T:Support.Threading.SynchronizationContextHelper">
            <summary>
            Provides methods for a synchronization context manipulation.
            </summary>
        </member>
        <member name="M:Support.Threading.SynchronizationContextHelper.PostException(System.Threading.SynchronizationContext,System.Exception)">
            <summary>
            Posts an exception to a specified <see cref="T:System.Threading.SynchronizationContext"/>.
            </summary>
            <param name="synchronizationContext">A <see cref="T:System.Threading.SynchronizationContext"/> where the exception is to be thrown.</param>
            <param name="exception">An <see cref="T:System.Exception"/> that is to be thrown.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="synchronizationContext"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="exception"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Support.Threading.TaskManager">
            <summary>
            Provides methods for asynchronous task execution.
            </summary>
        </member>
        <member name="M:Support.Threading.TaskManager.Post(System.Threading.SendOrPostCallback,System.Object,System.Threading.SynchronizationContext)">
            <summary>
            Posts a task for asynchronous execution.
            </summary>
            <param name="d">The <see cref="T:System.Threading.SendOrPostCallback"/> delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
            <param name="synchronizationContext">A <see cref="T:System.Threading.SynchronizationContext"/> to receive an exception that can be thrown.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="d"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Support.Threading.TaskManager.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Posts a task for asynchronous execution.
            </summary>
            <param name="d">The <see cref="T:System.Threading.SendOrPostCallback"/> delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="M:Support.Threading.TaskManager.PostYield(System.Threading.SendOrPostCallback,System.Object,System.Threading.SynchronizationContext)">
            <summary>
            Posts a task for asynchronous execution. The task executes only when there are no other tasks to execute.
            </summary>
            <param name="d">The <see cref="T:System.Threading.SendOrPostCallback"/> delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
            <param name="synchronizationContext">A <see cref="T:System.Threading.SynchronizationContext"/> to receive an exception that can be thrown.</param>
        </member>
        <member name="M:Support.Threading.TaskManager.PostYield(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Posts a task for asynchronous execution. The task executes only when there are no other tasks to execute.
            </summary>
            <param name="d">The <see cref="T:System.Threading.SendOrPostCallback"/> delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
    </members>
</doc>
